{"/home/travis/build/npmtest/node-npmtest-ib/test.js":"/* istanbul instrument in package npmtest_ib */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ib/lib.npmtest_ib.js":"/* istanbul instrument in package npmtest_ib */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ib = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ib = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ib/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ib && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ib */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ib\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ib.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ib.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ib.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ib.__dirname + '/lib.npmtest_ib.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/index.js":"var assert = require('assert');\nvar events = require('events');\nvar util = require('util');\n\nvar _ = require('lodash');\n\nvar C = require('./constants');\nvar Controller = require('./controller');\n\nfunction IB(options) {\n  this._controller = new Controller(this, options);\n\n  this.on('error', function () {});\n}\n\nutil.inherits(IB, events.EventEmitter);\n\nIB.prototype._send = function () {\n  var args = Array.prototype.slice.call(arguments);\n  this._controller.schedule('api', {\n    func: args[0],\n    args: args.slice(1)\n  });\n};\n\nIB.prototype.connect = function () {\n  this._controller.schedule('connect');\n\n  return this;\n};\n\nIB.prototype.disconnect = function () {\n  this._controller.schedule('disconnect');\n\n  return this;\n};\n\nIB.prototype.calculateImpliedVolatility = function (reqId, contract, optionPrice, underPrice) {\n  this._send('calculateImpliedVolatility', reqId, contract, optionPrice, underPrice);\n\n  return this;\n};\n\nIB.prototype.calculateOptionPrice = function (reqId, contract, volatility, underPrice) {\n  this._send('calculateOptionPrice', reqId, contract, volatility, underPrice);\n\n  return this;\n};\n\nIB.prototype.cancelAccountSummary = function (reqId) {\n  assert(_.isNumber(reqId), '\"reqId\" must be an integer - ' + reqId);\n\n  this._send('cancelAccountSummary', reqId);\n\n  return this;\n};\n\nIB.prototype.cancelCalculateImpliedVolatility = function (reqId) {\n  assert(_.isNumber(reqId), '\"reqId\" must be an integer - ' + reqId);\n\n  this._send('cancelCalculateImpliedVolatility', reqId);\n\n  return this;\n};\n\nIB.prototype.cancelCalculateOptionPrice = function (reqId) {\n  assert(_.isNumber(reqId), '\"reqId\" must be an integer - ' + reqId);\n\n  this._send('cancelCalculateOptionPrice', reqId);\n\n  return this;\n};\n\nIB.prototype.cancelFundamentalData = function (reqId) {\n  assert(_.isNumber(reqId), '\"reqId\" must be an integer - ' + reqId);\n\n  this._send('cancelFundamentalData', reqId);\n\n  return this;\n};\n\nIB.prototype.cancelHistoricalData = function (tickerId) {\n  assert(_.isNumber(tickerId), '\"tickerId\" must be an integer - ' + tickerId);\n\n  this._send('cancelHistoricalData', tickerId);\n\n  return this;\n};\n\nIB.prototype.cancelMktData = function (tickerId) {\n  assert(_.isNumber(tickerId), '\"tickerId\" must be an integer - ' + tickerId);\n\n  this._send('cancelMktData', tickerId);\n\n  return this;\n};\n\nIB.prototype.cancelMktDepth = function (tickerId) {\n  assert(_.isNumber(tickerId), '\"tickerId\" must be an integer - ' + tickerId);\n\n  this._send('cancelMktDepth', tickerId);\n\n  return this;\n};\n\nIB.prototype.cancelNewsBulletins = function () {\n  this._send('cancelNewsBulletins');\n\n  return this;\n};\n\nIB.prototype.cancelOrder = function (id) {\n  assert(_.isNumber(id), '\"id\" must be an integer - ' + id);\n\n  this._send('cancelOrder', id);\n\n  return this;\n};\n\nIB.prototype.cancelPositions = function () {\n  this._send('cancelPositions');\n\n  return this;\n};\n\nIB.prototype.cancelRealTimeBars = function (tickerId) {\n  assert(_.isNumber(tickerId), '\"tickerId\" must be an integer - ' + tickerId);\n\n  this._send('cancelRealTimeBars', tickerId);\n\n  return this;\n};\n\nIB.prototype.cancelScannerSubscription = function (tickerId) {\n  assert(_.isNumber(tickerId), '\"tickerId\" must be an integer - ' + tickerId);\n\n  this._send('cancelScannerSubscription', tickerId);\n\n  return this;\n};\n\nIB.prototype.exerciseOptions = function (tickerId, contract, exerciseAction, exerciseQuantity,\n                                         account, override) {\n  assert(_.isNumber(tickerId), '\"tickerId\" must be an integer - ' + tickerId);\n  assert(_.isPlainObject(contract), '\"contract\" must be a plain object - ' + contract);\n  assert(_.isNumber(exerciseAction), '\"exerciseAction\" must be an integer - ' + exerciseAction);\n  assert(_.isNumber(exerciseQuantity), '\"exerciseQuantity\" must be an integer - ' + exerciseQuantity);\n  assert(_.isString(account), '\"account\" must be a string - ' + account);\n  assert(_.isNumber(override), '\"override\" must be an integer - ' + override);\n\n  this._send('exerciseOptions', tickerId, contract, exerciseAction, exerciseQuantity,\n                                account, override);\n\n  return this;\n};\n\nIB.prototype.placeOrder = function (id, contract, order) {\n  assert(_.isNumber(id), '\"id\" must be an integer - ' + id);\n  assert(_.isPlainObject(contract), '\"contract\" must be a plain object - ' + contract);\n  assert(_.isPlainObject(order), '\"order\" must be a plain object - ' + order);\n\n  this._send('placeOrder', id, contract, order);\n\n  return this;\n};\n\nIB.prototype.replaceFA = function (faDataType, xml) {\n  assert(_.isNumber(faDataType), '\"faDataType\" must be an integer - ' + faDataType);\n  assert(_.isString(xml), '\"xml\" must be a string - ' + xml);\n\n  this._send('replaceFA', faDataType, xml);\n\n  return this;\n};\n\nIB.prototype.reqAccountSummary = function (reqId, group, tags) {\n  assert(_.isNumber(reqId), '\"reqId\" must be an integer - ' + reqId);\n  assert(_.isString(group), '\"group\" must be a string - ' + group);\n  assert(_.isArray(tags) || _.isString(tags), '\"tags\" must be array or string - ' + tags);\n\n  if (_.isArray(tags)) { tags = tags.join(','); }\n\n  this._send('reqAccountSummary', reqId, group, tags);\n\n  return this;\n};\n\nIB.prototype.reqAccountUpdates = function (subscribe, acctCode) {\n  assert(_.isBoolean(subscribe), '\"subscribe\" must be a boolean - ' + subscribe);\n  assert(_.isString(acctCode), '\"acctCode\" must be a string - ' + acctCode);\n\n  this._send('reqAccountUpdates', subscribe, acctCode);\n\n  return this;\n};\n\nIB.prototype.reqAllOpenOrders = function () {\n  this._send('reqAllOpenOrders');\n\n  return this;\n};\n\nIB.prototype.reqAutoOpenOrders = function (bAutoBind) {\n  assert(_.isBoolean(bAutoBind), '\"bAutoBind\" must be a boolean - ' + bAutoBind);\n\n  this._send('reqAutoOpenOrders', bAutoBind);\n\n  return this;\n};\n\nIB.prototype.reqContractDetails = function (reqId, contract) {\n  assert(_.isNumber(reqId), '\"reqId\" must be an integer - ' + reqId);\n  assert(_.isPlainObject(contract), '\"contract\" must be a plain object - ' + contract);\n\n  this._send('reqContractDetails', reqId, contract);\n\n  return this;\n};\n\nIB.prototype.reqCurrentTime = function () {\n  this._send('reqCurrentTime');\n\n  return this;\n};\n\nIB.prototype.reqExecutions = function (reqId, filter) {\n  assert(_.isNumber(reqId), '\"reqId\" must be an integer - ' + reqId);\n  assert(_.isPlainObject(filter), '\"filter\" must be a plain object - ' + filter);\n\n  this._send('reqExecutions', reqId, filter);\n\n  return this;\n};\n\nIB.prototype.reqFundamentalData = function (reqId, contract, reportType) {\n  assert(_.isNumber(reqId), '\"reqId\" must be an integer - ' + reqId);\n  assert(_.isPlainObject(contract), '\"contract\" must be a plain object - ' + contract);\n  assert(_.isString(reportType), '\"reportType\" must be a string - ' + reportType);\n\n  this._send('reqFundamentalData', reqId, contract, reportType);\n\n  return this;\n};\n\nIB.prototype.reqGlobalCancel = function () {\n  this._send('reqGlobalCancel');\n\n  return this;\n};\n\nIB.prototype.reqHistoricalData = function (tickerId, contract, endDateTime, durationStr,\n                                           barSizeSetting, whatToShow, useRTH, formatDate) {\n  assert(_.isNumber(tickerId), '\"tickerId\" must be an integer - ' + tickerId);\n  assert(_.isPlainObject(contract), '\"contract\" must be a plain object - ' + contract);\n  assert(_.isString(endDateTime), '\"endDateTime\" must be a string - ' + endDateTime);\n  assert(_.isString(durationStr), '\"durationStr\" must be a string - ' + durationStr);\n  assert(_.isString(barSizeSetting), '\"barSizeSetting\" must be a string - ' + barSizeSetting);\n  assert(_.isString(whatToShow), '\"whatToShow\" must be a string - ' + whatToShow);\n  assert(_.isNumber(useRTH), '\"useRTH\" must be an integer - ' + useRTH);\n  assert(_.isNumber(formatDate), '\"formatDate\" must be an integer - ' + formatDate);\n\n  this._send('reqHistoricalData', tickerId, contract, endDateTime, durationStr,\n                                     barSizeSetting, whatToShow, useRTH, formatDate);\n\n  return this;\n};\n\nIB.prototype.reqIds = function (numIds) {\n  assert(_.isNumber(numIds), '\"numIds\" must be an integer - ' + numIds);\n\n  this._send('reqIds', numIds);\n\n  return this;\n};\n\nIB.prototype.reqManagedAccts = function () {\n  this._send('reqManagedAccts');\n\n  return this;\n};\n\nIB.prototype.reqMarketDataType = function (marketDataType) {\n  assert(_.isNumber(marketDataType), '\"marketDataType\" must be an integer - ' + marketDataType);\n\n  this._send('reqMarketDataType', marketDataType);\n\n  return this;\n};\n\nIB.prototype.reqMktData = function (tickerId, contract, genericTickList, snapshot) {\n  assert(_.isNumber(tickerId), '\"tickerId\" must be an integer - ' + tickerId);\n  assert(_.isPlainObject(contract), '\"contract\" must be a plain object - ' + contract);\n  assert(_.isString(genericTickList), '\"genericTickList\" must be a string - ' + genericTickList);\n  assert(_.isBoolean(snapshot), '\"snapshot\" must be a boolean - ' + snapshot);\n\n  this._send('reqMktData', tickerId, contract, genericTickList, snapshot);\n\n  return this;\n};\n\nIB.prototype.reqMktDepth = function (tickerId, contract, numRows) {\n  assert(_.isNumber(tickerId), '\"tickerId\" must be an integer - ' + tickerId);\n  assert(_.isPlainObject(contract), '\"contract\" must be a plain object - ' + contract);\n  assert(_.isNumber(numRows), '\"numRows\" must be an integer - ' + numRows);\n\n  this._send('reqMktDepth', tickerId, contract, numRows);\n\n  return this;\n};\n\nIB.prototype.reqNewsBulletins = function (allMsgs) {\n  assert(_.isBoolean(allMsgs), '\"allMsgs\" must be a boolean - ' + allMsgs);\n\n  this._send('reqNewsBulletins', allMsgs);\n\n  return this;\n};\n\nIB.prototype.reqOpenOrders = function () {\n  this._send('reqOpenOrders');\n\n  return this;\n};\n\nIB.prototype.reqPositions = function () {\n  this._send('reqPositions');\n\n  return this;\n};\n\nIB.prototype.reqRealTimeBars = function (tickerId, contract, barSize, whatToShow, useRTH) {\n  assert(_.isNumber(tickerId), '\"tickerId\" must be an integer - ' + tickerId);\n  assert(_.isPlainObject(contract), '\"contract\" must be a plain object - ' + contract);\n  assert(_.isNumber(barSize), '\"barSize\" must be an integer - ' + barSize);\n  assert(_.isString(whatToShow), '\"whatToShow\" must be a string - ' + whatToShow);\n  assert(_.isBoolean(useRTH), '\"useRTH\" must be a boolean - ' + useRTH);\n\n  this._send('reqRealTimeBars', tickerId, contract, barSize, whatToShow, useRTH);\n\n  return this;\n};\n\nIB.prototype.reqScannerParameters = function () {\n  this._send('reqScannerParameters');\n\n  return this;\n};\n\nIB.prototype.reqScannerSubscription = function (tickerId, subscription) {\n  assert(_.isNumber(tickerId), '\"tickerId\" must be an integer - ' + tickerId);\n  assert(_.isPlainObject(subscription), '\"subscription\" must be a plain object - ' + subscription);\n\n  this._send('reqScannerSubscription', tickerId, subscription);\n\n  return this;\n};\n\nIB.prototype.requestFA = function (faDataType) {\n  assert(_.isNumber(faDataType), '\"faDataType\" must be an integer - ' + faDataType);\n\n  this._send('requestFA', faDataType);\n\n  return this;\n};\n\nIB.prototype.setServerLogLevel = function (logLevel) {\n  assert(_.isNumber(logLevel), '\"logLevel\" must be an integer - ' + logLevel);\n\n  this._send('setServerLogLevel', logLevel);\n\n  return this;\n};\n\n// Attach constants.\n_.keys(C).forEach(function (key) {\n  Object.defineProperty(IB.prototype, key, {\n    get: function () {\n      return C[key];\n    }\n  });\n  Object.defineProperty(IB, key, {\n    get: function () {\n      return C[key];\n    }\n  });\n});\n\n// Attach modules.\nIB.contract = IB.prototype.contract = require('./contract');\nIB.order = IB.prototype.order = require('./order');\nIB.util = IB.prototype.util = require('./util');\n\nmodule.exports = IB;\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/constants.js":"exports.VERSION = 'twsapi_macunix.970.01';\n\nexports.DEFAULT_HOST = '127.0.0.1';\nexports.DEFAULT_PORT = 7496;\nexports.DEFAULT_CLIENT_ID = 0;\nexports.MAX_REQ_PER_SECOND = 40;\n\nexports.CLIENT_VERSION = 62;\nexports.SERVER_VERSION = 38;\n\n// incoming msg id's\nexports.INCOMING = {\n  TICK_PRICE: 1,\n  TICK_SIZE: 2,\n  ORDER_STATUS: 3,\n  ERR_MSG: 4,\n  OPEN_ORDER: 5,\n  ACCT_VALUE: 6,\n  PORTFOLIO_VALUE: 7,\n  ACCT_UPDATE_TIME: 8,\n  NEXT_VALID_ID: 9,\n  CONTRACT_DATA: 10,\n  EXECUTION_DATA: 11,\n  MARKET_DEPTH: 12,\n  MARKET_DEPTH_L2: 13,\n  NEWS_BULLETINS: 14,\n  MANAGED_ACCTS: 15,\n  RECEIVE_FA: 16,\n  HISTORICAL_DATA: 17,\n  BOND_CONTRACT_DATA: 18,\n  SCANNER_PARAMETERS: 19,\n  SCANNER_DATA: 20,\n  TICK_OPTION_COMPUTATION: 21,\n  TICK_GENERIC: 45,\n  TICK_STRING: 46,\n  TICK_EFP: 47,\n  CURRENT_TIME: 49,\n  REAL_TIME_BARS: 50,\n  FUNDAMENTAL_DATA: 51,\n  CONTRACT_DATA_END: 52,\n  OPEN_ORDER_END: 53,\n  ACCT_DOWNLOAD_END: 54,\n  EXECUTION_DATA_END: 55,\n  DELTA_NEUTRAL_VALIDATION: 56,\n  TICK_SNAPSHOT_END: 57,\n  MARKET_DATA_TYPE: 58,\n  COMMISSION_REPORT: 59,\n  POSITION: 61,\n  POSITION_END: 62,\n  ACCOUNT_SUMMARY: 63,\n  ACCOUNT_SUMMARY_END: 64\n};\n\n// outgoing msg id's\nexports.OUTGOING = {\n  REQ_MKT_DATA: 1,\n  CANCEL_MKT_DATA: 2,\n  PLACE_ORDER: 3,\n  CANCEL_ORDER: 4,\n  REQ_OPEN_ORDERS: 5,\n  REQ_ACCOUNT_DATA: 6,\n  REQ_EXECUTIONS: 7,\n  REQ_IDS: 8,\n  REQ_CONTRACT_DATA: 9,\n  REQ_MKT_DEPTH: 10,\n  CANCEL_MKT_DEPTH: 11,\n  REQ_NEWS_BULLETINS: 12,\n  CANCEL_NEWS_BULLETINS: 13,\n  SET_SERVER_LOGLEVEL: 14,\n  REQ_AUTO_OPEN_ORDERS: 15,\n  REQ_ALL_OPEN_ORDERS: 16,\n  REQ_MANAGED_ACCTS: 17,\n  REQ_FA: 18,\n  REPLACE_FA: 19,\n  REQ_HISTORICAL_DATA: 20,\n  EXERCISE_OPTIONS: 21,\n  REQ_SCANNER_SUBSCRIPTION: 22,\n  CANCEL_SCANNER_SUBSCRIPTION: 23,\n  REQ_SCANNER_PARAMETERS: 24,\n  CANCEL_HISTORICAL_DATA: 25,\n  REQ_CURRENT_TIME: 49,\n  REQ_REAL_TIME_BARS: 50,\n  CANCEL_REAL_TIME_BARS: 51,\n  REQ_FUNDAMENTAL_DATA: 52,\n  CANCEL_FUNDAMENTAL_DATA: 53,\n  REQ_CALC_IMPLIED_VOLAT: 54,\n  REQ_CALC_OPTION_PRICE: 55,\n  CANCEL_CALC_IMPLIED_VOLAT: 56,\n  CANCEL_CALC_OPTION_PRICE: 57,\n  REQ_GLOBAL_CANCEL: 58,\n  REQ_MARKET_DATA_TYPE: 59,\n  REQ_POSITIONS: 61,\n  REQ_ACCOUNT_SUMMARY: 62,\n  CANCEL_ACCOUNT_SUMMARY: 63,\n  CANCEL_POSITIONS: 64\n};\n\nexports.MIN_SERVER_VER = {\n  REAL_TIME_BARS: 34,\n  SCALE_ORDERS: 35,\n  SNAPSHOT_MKT_DATA: 35,\n  SSHORT_COMBO_LEGS: 35,\n  WHAT_IF_ORDERS: 36,\n  CONTRACT_CONID: 37,\n  PTA_ORDERS: 39,\n  FUNDAMENTAL_DATA: 40,\n  UNDER_COMP: 40,\n  CONTRACT_DATA_CHAIN: 40,\n  SCALE_ORDERS2: 40,\n  ALGO_ORDERS: 41,\n  EXECUTION_DATA_CHAIN: 42,\n  NOT_HELD: 44,\n  SEC_ID_TYPE: 45,\n  PLACE_ORDER_CONID: 46,\n  REQ_MKT_DATA_CONID: 47,\n  REQ_CALC_IMPLIED_VOLAT: 49,\n  REQ_CALC_OPTION_PRICE: 50,\n  CANCEL_CALC_IMPLIED_VOLAT: 50,\n  CANCEL_CALC_OPTION_PRICE: 50,\n  SSHORTX_OLD: 51,\n  SSHORTX: 52,\n  REQ_GLOBAL_CANCEL: 53,\n  HEDGE_ORDERS: 54,\n  REQ_MARKET_DATA_TYPE: 55,\n  OPT_OUT_SMART_ROUTING: 56,\n  SMART_COMBO_ROUTING_PARAMS: 57,\n  DELTA_NEUTRAL_CONID: 58,\n  SCALE_ORDERS3: 60,\n  ORDER_COMBO_LEGS_PRICE: 61,\n  TRAILING_PERCENT: 62,\n  DELTA_NEUTRAL_OPEN_CLOSE: 66,\n  ACCT_SUMMARY: 67,\n  TRADING_CLASS: 68,\n  SCALE_TABLE: 69\n};\n\nexports.BAG_SEC_TYPE = 'BAG';\n\n// FA msg data types\nexports.FA_DATA_TYPE = {\n  GROUPS: 1,\n  PROFILES: 2,\n  ALIASES: 3\n};\n\nexports.LOG_LEVEL = {\n  SYSTEM: 1,\n  ERROR: 2,\n  WARN: 3,\n  INFO: 4,\n  DETAIL: 5\n};\n\n// constants - tick types\nexports.TICK_TYPE = {\n  BID_SIZE:  0,\n  BID: 1,\n  ASK: 2,\n  ASK_SIZE: 3,\n  LAST: 4,\n  LAST_SIZE: 5,\n  HIGH: 6,\n  LOW: 7,\n  VOLUME: 8,\n  CLOSE: 9,\n  BID_OPTION: 10,\n  ASK_OPTION: 11,\n  LAST_OPTION: 12,\n  MODEL_OPTION: 13,\n  OPEN: 14,\n  LOW_13_WEEK: 15,\n  HIGH_13_WEEK: 16,\n  LOW_26_WEEK: 17,\n  HIGH_26_WEEK: 18,\n  LOW_52_WEEK: 19,\n  HIGH_52_WEEK: 20,\n  AVG_VOLUME: 21,\n  OPEN_INTEREST: 22,\n  OPTION_HISTORICAL_VOL: 23,\n  OPTION_IMPLIED_VOL: 24,\n  OPTION_BID_EXCH: 25,\n  OPTION_ASK_EXCH: 26,\n  OPTION_CALL_OPEN_INTEREST: 27,\n  OPTION_PUT_OPEN_INTEREST: 28,\n  OPTION_CALL_VOLUME: 29,\n  OPTION_PUT_VOLUME: 30,\n  INDEX_FUTURE_PREMIUM: 31,\n  BID_EXCH: 32,\n  ASK_EXCH: 33,\n  AUCTION_VOLUME: 34,\n  AUCTION_PRICE: 35,\n  AUCTION_IMBALANCE: 36,\n  MARK_PRICE: 37,\n  BID_EFP_COMPUTATION: 38,\n  ASK_EFP_COMPUTATION: 39,\n  LAST_EFP_COMPUTATION: 40,\n  OPEN_EFP_COMPUTATION: 41,\n  HIGH_EFP_COMPUTATION: 42,\n  LOW_EFP_COMPUTATION: 43,\n  CLOSE_EFP_COMPUTATION: 44,\n  LAST_TIMESTAMP: 45,\n  SHORTABLE: 46,\n  FUNDAMENTAL_RATIOS: 47,\n  RT_VOLUME: 48,\n  HALTED: 49,\n  BID_YIELD: 50,\n  ASK_YIELD: 51,\n  LAST_YIELD: 52,\n  CUST_OPTION_COMPUTATION: 53,\n  TRADE_COUNT: 54,\n  TRADE_RATE: 55,\n  VOLUME_RATE: 56,\n  LAST_RTH_TRADE: 57,\n  REGULATORY_IMBALANCE: 61\n};\n\nexports.EXERCISE_ACTION = {\n  EXERCISE: 1,\n  LAPSE: 2\n};\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/controller.js":"var _ = require('lodash');\nvar CommandBuffer = require('command-buffer');\n\nvar C = require('./constants');\nvar Socket = require('./socket');\nvar Incoming = require('./incoming');\nvar Outgoing = require('./outgoing');\n\nfunction Controller(ib, options) {\n  if (!_.isPlainObject(options)) { options = {}; }\n\n  _.defaults(options, {\n    host: C.DEFAULT_HOST,\n    port: C.DEFAULT_PORT,\n    clientId: C.DEFAULT_CLIENT_ID,\n  });\n\n  Object.defineProperty(this, 'options', {\n    get: function () {\n      return options;\n    }\n  });\n\n  this._ib = ib;\n  this._serverVersion = null;\n  this._serverConnectionTime = null;\n\n  this._socket = new Socket(this);\n  this._incoming = new Incoming(this);\n  this._outgoing = new Outgoing(this);\n\n  this._commands = new CommandBuffer(function (type, data) {\n    var funcName = '_' + type;\n    if (_.has(this.constructor.prototype, funcName) && _.isFunction(this[funcName])) {\n      this[funcName](data);\n    } else {\n      throw new Error('Missing function - ' + funcName);\n    }\n  }, this);\n}\n\nController.prototype._api = function (data) {\n  var func;\n  if (_.has(this._outgoing.constructor.prototype, data.func)) {\n    func = this._outgoing[data.func];\n    if (_.isFunction(func)) {\n      return func.apply(this._outgoing, data.args);\n    }\n  }\n  throw new Error('Unknown outgoing func - ' + data.func);\n};\n\nController.prototype._connect = function () {\n  if (!this._socket._connected) {\n    this._socket.connect();\n  } else {\n    this.emitError('Cannot connect if already connected.');\n  }\n};\n\nController.prototype._disconnect = function () {\n  if (this._socket._connected) {\n    this._socket.disconnect();\n  } else {\n    this.emitError('Cannot disconnect if already disconnected.');\n  }\n};\n\nController.prototype._send = function (data, async) {\n  if (this._socket._connected) {\n    this._socket.send(data, async);\n  } else {\n    this.emitError('Cannot send data when disconnected.');\n  }\n};\n\nController.prototype._sendAsync = function (data) {\n  this._send(data, true);\n};\n\nController.prototype.emit = function () {\n  var args = Array.prototype.slice.call(arguments);\n\n  if (args[0] === 'error' && !!args[1] && args[1].message) {\n    args[1] = args[1].message;\n  }\n\n  this._ib.emit.apply(this._ib, arguments);\n\n  var eventOfArgs = args[0];\n  var argsOfArgs = args.slice(1);\n\n  if (!_.includes(['connected', 'disconnected', 'error', 'received', 'sent', 'server'], eventOfArgs)) {\n    this._ib.emit('result', eventOfArgs, argsOfArgs);\n  }\n\n  this._ib.emit('all', eventOfArgs, argsOfArgs);\n};\n\nController.prototype.emitError = function (errMsg, data) {\n  this.emit('error', new Error(errMsg), data);\n};\n\nController.prototype.pause = function () {\n  this._commands.pause.apply(this._commands, arguments);\n};\n\nController.prototype.resume = function () {\n  this._commands.resume.apply(this._commands, arguments);\n};\n\nController.prototype.run = function () {\n  this._commands.run.apply(this._commands, arguments);\n};\n\nController.prototype.schedule = function () {\n  this._commands.schedule.apply(this._commands, arguments);\n};\n\nmodule.exports = Controller;\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/socket.js":"var net = require('net');\n\nvar _ = require('lodash');\n\nvar C = require('./constants');\n\nvar EOL = '\\0';\n\nfunction Socket(controller) {\n  this._controller = controller;\n\n  this._client = null;\n  this._connected = false;\n  this._dataFragment = '';\n  this._neverReceived = true;\n  this._neverSent = true;\n  this._waitingAsync = false;\n}\n\nSocket.prototype._onConnect = function () {\n  this._connected = true;\n  this._controller.emit('connected');\n\n  this._controller.run('sendAsync', [C.CLIENT_VERSION]);\n  this._controller.run('sendAsync', [this._controller.options.clientId]);\n};\n\nSocket.prototype._onData = function (data) {\n  var dataWithFragment = this._dataFragment + data.toString();\n\n  var tokens = dataWithFragment.split(EOL);\n  if (tokens[tokens.length - 1] !== '') {\n    this._dataFragment = tokens[tokens.length - 1];\n  } else {\n    this._dataFragment = '';\n  }\n  tokens = tokens.slice(0, -1);\n  this._controller.emit('received', tokens.slice(0), data);\n\n  // Process data queue\n  this._controller._incoming.enqueue(tokens);\n\n  if (this._neverReceived) {\n    this._controller._serverVersion = parseInt(this._controller._incoming.dequeue(), 10);\n    this._controller._serverConnectionTime = this._controller._incoming.dequeue();\n    this._controller.emit('server', this._controller._serverVersion, this._controller._serverConnectionTime);\n  }\n\n  this._controller._incoming.process();\n\n  // Async\n  if (this._waitingAsync) {\n    this._waitingAsync = false;\n    this._controller.resume();\n  }\n\n  this._neverReceived = false;\n};\n\nSocket.prototype._onEnd = function () {\n  var wasConnected = this._connected;\n  this._connected = false;\n\n  if (wasConnected) {\n    this._controller.emit('disconnected');\n  }\n\n  this._controller.resume();\n};\n\nSocket.prototype._onError = function (err) {\n  this._controller.emit('error', err);\n};\n\nSocket.prototype.connect = function () {\n  var self = this;\n\n  this._controller.pause();\n\n  this._neverReceived = true;\n  this._neverSent = true;\n\n  this._client = net.connect({\n    host: this._controller.options.host,\n    port: this._controller.options.port\n  }, function () {\n    self._onConnect.apply(self, arguments);\n    self._controller.resume();\n  });\n\n  this._client.on('data', function () {\n    self._onData.apply(self, arguments);\n  });\n\n  this._client.on('close', function () {\n    self._onEnd.apply(self, arguments);\n  });\n\n  this._client.on('end', function () {\n    self._onEnd.apply(self, arguments);\n  });\n\n  this._client.on('error', function () {\n    self._onError.apply(self, arguments);\n  });\n};\n\nSocket.prototype.disconnect = function () {\n  this._controller.pause();\n  this._client.end();\n};\n\nSocket.prototype.send = function (tokens, async) {\n  if (async) {\n    this._waitingAsync = true;\n    this._controller.pause();\n  }\n\n  tokens = _.flatten([tokens]);\n\n  _.forEach(tokens, function (value, i) {\n    if (_.isBoolean(value)) {\n      tokens[i] = value ? 1 : 0;\n    }\n  });\n\n  var data = tokens.join(EOL) + EOL;\n  this._client.write(data);\n\n  this._controller.emit('sent', tokens, data);\n\n  this._neverSent = false;\n};\n\nmodule.exports = Socket;\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/incoming.js":"var _ = require('lodash');\n\nvar C = require('./constants');\nvar errors = require('./errors');\n\nfunction Incoming(controller) {\n  this._controller = controller;\n\n  this._dataQueue = [];\n  this._emitQueue = [];\n}\n\nIncoming.prototype._ACCT_DOWNLOAD_END = function () {\n  var version = this.dequeueInt();\n  var accountName = this.dequeue();\n\n  this._emit('accountDownloadEnd', accountName);\n};\n\nIncoming.prototype._ACCOUNT_SUMMARY = function () {\n  var version = this.dequeueInt();\n  var reqId = this.dequeueInt();\n  var account = this.dequeue();\n  var tag = this.dequeue();\n  var value = this.dequeue();\n  var currency = this.dequeue();\n\n  this._emit('accountSummary', reqId, account, tag, value, currency);\n};\n\nIncoming.prototype._ACCOUNT_SUMMARY_END = function () {\n  var version = this.dequeueInt();\n  var reqId = this.dequeueInt();\n\n  this._emit('accountSummaryEnd', reqId);\n};\n\nIncoming.prototype._ACCT_UPDATE_TIME = function () {\n  var version = this.dequeueInt();\n  var timeStamp = this.dequeue();\n\n  this._emit('updateAccountTime', timeStamp);\n};\n\nIncoming.prototype._ACCT_VALUE = function () {\n  var version = this.dequeueInt();\n  var key = this.dequeue();\n  var value  = this.dequeue();\n  var currency = this.dequeue();\n  var accountName = null;\n\n  if (version >= 2) {\n    accountName = this.dequeue();\n  }\n\n  this._emit('updateAccountValue', key, value, currency, accountName);\n};\n\nIncoming.prototype._COMMISSION_REPORT = function () {\n  var version = this.dequeueInt();\n\n  var commissionReport = {};\n  commissionReport.execId = this.dequeue();\n  commissionReport.commission = this.dequeueFloat();\n  commissionReport.currency = this.dequeue();\n  commissionReport.realizedPNL = this.dequeueFloat();\n  commissionReport.yield = this.dequeueFloat();\n  commissionReport.yieldRedemptionDate = this.dequeueInt();\n\n  this._emit('commissionReport', commissionReport);\n};\n\nIncoming.prototype._BOND_CONTRACT_DATA = function () {\n  var version = this.dequeueInt();\n  var reqId = -1;\n  var i;\n\n  if (version >= 3) {\n    reqId = this.dequeueInt();\n  }\n\n  var contract = {\n    summary: {}\n  };\n\n  contract.summary.symbol = this.dequeue();\n  contract.summary.secType = this.dequeue();\n  contract.cusip = this.dequeue();\n  contract.coupon = this.dequeueFloat();\n  contract.maturity = this.dequeue();\n  contract.issueDate  = this.dequeue();\n  contract.ratings = this.dequeue();\n  contract.bondType = this.dequeue();\n  contract.couponType = this.dequeue();\n  contract.convertible = this.dequeueBool();\n  contract.callable = this.dequeueBool();\n  contract.putable = this.dequeueBool();\n  contract.descAppend = this.dequeue();\n  contract.summary.exchange = this.dequeue();\n  contract.summary.currency = this.dequeue();\n  contract.marketName = this.dequeue();\n  contract.summary.tradingClass = this.dequeue();\n  contract.summary.conId = this.dequeueInt();\n  contract.minTick = this.dequeueFloat();\n  contract.orderTypes = this.dequeue();\n  contract.validExchanges = this.dequeue();\n\n  if (version >= 2) {\n    contract.nextOptionDate = this.dequeue();\n    contract.nextOptionType = this.dequeue();\n    contract.nextOptionPartial = this.dequeueBool();\n    contract.notes = this.dequeue();\n  }\n\n  if(version >= 4) {\n    contract.longName = this.dequeue();\n  }\n\n  if (version >= 6) {\n    contract.evRule = this.dequeue();\n    contract.evMultiplier = this.dequeueFloat();\n  }\n\n  var secIdListCount;\n  var tagValue;\n\n  if (version >= 5) {\n    secIdListCount = this.dequeueInt();\n\n    if (secIdListCount > 0) {\n      contract.secIdList = [];\n\n      while (secIdListCount--) {\n        tagValue = {};\n        tagValue.tag = this.dequeue();\n        tagValue.value = this.dequeue();\n        contract.secIdList.push(tagValue);\n      }\n    }\n  }\n\n  this._emit('bondContractDetails', reqId, contract);\n};\n\nIncoming.prototype._CONTRACT_DATA = function () {\n  var version = this.dequeueInt();\n  var reqId = -1;\n\n  if (version >= 3) {\n    reqId = this.dequeueInt();\n  }\n\n  var contract = {\n    summary: {}\n  };\n\n  contract.summary.symbol = this.dequeue();\n  contract.summary.secType = this.dequeue();\n  contract.summary.expiry = this.dequeue();\n  contract.summary.strike = this.dequeueFloat();\n  contract.summary.right = this.dequeue();\n  contract.summary.exchange = this.dequeue();\n  contract.summary.currency = this.dequeue();\n  contract.summary.localSymbol = this.dequeue();\n  contract.marketName = this.dequeue();\n  contract.summary.tradingClass = this.dequeue();\n  contract.summary.conId = this.dequeueInt();\n  contract.minTick = this.dequeueFloat();\n  contract.summary.multiplier = this.dequeue();\n  contract.orderTypes = this.dequeue();\n  contract.validExchanges = this.dequeue();\n\n  if (version >= 2) {\n    contract.priceMagnifier = this.dequeueInt();\n  }\n\n  if (version >= 4) {\n    contract.underConId = this.dequeueInt();\n  }\n\n  if (version >= 5) {\n    contract.longName = this.dequeue();\n    contract.summary.primaryExch = this.dequeue();\n  }\n\n  if (version >= 6) {\n    contract.contractMonth = this.dequeue();\n    contract.industry = this.dequeue();\n    contract.category = this.dequeue();\n    contract.subcategory = this.dequeue();\n    contract.timeZoneId = this.dequeue();\n    contract.tradingHours = this.dequeue();\n    contract.liquidHours = this.dequeue();\n  }\n\n  if (version >= 8) {\n    contract.evRule = this.dequeue();\n    contract.evMultiplier = this.dequeueFloat();\n  }\n\n  var secIdListCount;\n  var tagValue;\n  var i;\n\n  if (version >= 7) {\n    secIdListCount = this.dequeueInt();\n    if (secIdListCount  > 0) {\n      contract.secIdList = [];\n      for (i = 0; i < secIdListCount; ++i) {\n        tagValue = {};\n        tagValue.tag = this.dequeue();\n        tagValue.value = this.dequeue();\n        contract.secIdList.push(tagValue);\n      }\n    }\n  }\n\n  this._emit('contractDetails', reqId, contract);\n};\n\nIncoming.prototype._CONTRACT_DATA_END = function () {\n  var version = this.dequeueInt();\n  var reqId = this.dequeueInt();\n\n  this._emit('contractDetailsEnd', reqId);\n};\n\nIncoming.prototype._CURRENT_TIME = function () {\n  var version = this.dequeueInt();\n  var time = this.dequeueInt();\n\n  this._emit('currentTime', time);\n};\n\nIncoming.prototype._DELTA_NEUTRAL_VALIDATION = function () {\n  var version = this.dequeueInt();\n  var reqId = this.dequeueInt();\n\n  var underComp = {};\n  underComp.conId = this.dequeueInt();\n  underComp.delta = this.dequeueFloat();\n  underComp.price = this.dequeueFloat();\n\n  this._emit('deltaNeutralValidation', reqId, underComp);\n};\n\nIncoming.prototype._ERR_MSG = function () {\n  var errorCode;\n  var errorMsg;\n  var id;\n  var version = this.dequeueInt();\n\n  if (version < 2) {\n    errorMsg = this.dequeue();\n    this._controller.emitError(errorMsg);\n  } else {\n    id = this.dequeueInt();\n    errorCode = this.dequeueInt();\n    errorMsg = this.dequeue();\n    this._controller.emitError(errorMsg, {\n      id: id,\n      code: errorCode\n    });\n  }\n};\n\nIncoming.prototype._EXECUTION_DATA = function () {\n  var version = this.dequeueInt();\n\n  var reqId = -1;\n\n  if (version >= 7) {\n    reqId = this.dequeueInt();\n  }\n\n  var orderId = this.dequeueInt();\n\n  // read contract fields\n  var contract = {};\n\n  if (version >= 5) {\n    contract.conId = this.dequeueInt();\n  }\n\n  contract.symbol = this.dequeue();\n  contract.secType = this.dequeue();\n  contract.expiry = this.dequeue();\n  contract.strike = this.dequeueFloat();\n  contract.right = this.dequeue();\n\n  if (version >= 9) {\n    contract.multiplier = this.dequeue();\n  }\n\n  contract.exchange = this.dequeue();\n  contract.currency = this.dequeue();\n  contract.localSymbol = this.dequeue();\n\n  if (version >= 10) {\n    contract.tradingClass = this.dequeue();\n  }\n\n  var exec = {};\n\n  exec.orderId = orderId;\n  exec.execId = this.dequeue();\n  exec.time = this.dequeue();\n  exec.acctNumber = this.dequeue();\n  exec.exchange = this.dequeue();\n  exec.side = this.dequeue();\n  exec.shares = this.dequeue();\n  exec.price = this.dequeueFloat();\n\n  if (version >= 2) {\n    exec.permId = this.dequeueInt();\n  }\n\n  if (version >= 3) {\n    exec.clientId = this.dequeueInt();\n  }\n\n  if (version >= 4) {\n    exec.liquidation = this.dequeueInt();\n  }\n\n  if (version >= 6) {\n    exec.cumQty = this.dequeueInt();\n    exec.avgPrice = this.dequeueFloat();\n  }\n\n  if (version >= 8) {\n    exec.orderRef = this.dequeue();\n  }\n\n  if (version >= 9) {\n    exec.evRule = this.dequeue();\n    exec.evMultiplier = this.dequeueFloat();\n  }\n\n  this._emit('execDetails', reqId, contract, exec);\n};\n\nIncoming.prototype._EXECUTION_DATA_END = function () {\n  var version = this.dequeueInt();\n  var reqId = this.dequeueInt();\n\n  this._emit('execDetailsEnd', reqId);\n};\n\nIncoming.prototype._FUNDAMENTAL_DATA = function () {\n  var version = this.dequeueInt();\n  var reqId = this.dequeueInt();\n  var data = this.dequeue();\n\n  this._emit('fundamentalData', reqId, data);\n};\n\nIncoming.prototype._HISTORICAL_DATA = function () {\n  var version = this.dequeueInt();\n  var reqId = this.dequeueInt();\n  var completedIndicator = 'finished';\n  var startDateStr;\n  var endDateStr;\n\n  if (version >= 2) {\n    startDateStr = this.dequeue();\n    endDateStr = this.dequeue();\n    completedIndicator += '-' + startDateStr + '-' + endDateStr;\n  }\n\n  var itemCount = this.dequeueInt();\n  var date;\n  var open;\n  var high;\n  var low;\n  var close;\n  var volume;\n  var WAP;\n  var hasGaps;\n  var barCount;\n\n  while (itemCount--) {\n    date = this.dequeue();\n    open = this.dequeueFloat();\n    high = this.dequeueFloat();\n    low = this.dequeueFloat();\n    close = this.dequeueFloat();\n    volume = this.dequeueInt();\n    WAP = this.dequeueFloat();\n    hasGaps = this.dequeueBool();\n    barCount = -1;\n\n    if (version >= 3) {\n      barCount = this.dequeueInt();\n    }\n\n    this._emit('historicalData', reqId, date, open, high, low, close, volume, barCount, WAP, hasGaps);\n  }\n\n  // send end of dataset marker\n  this._emit('historicalData', reqId, completedIndicator, -1, -1, -1, -1, -1, -1, -1, false);\n};\n\nIncoming.prototype._MANAGED_ACCTS = function () {\n  var version = this.dequeueInt();\n  var accountsList = this.dequeue();\n\n  this._emit('managedAccounts', accountsList);\n};\n\nIncoming.prototype._MARKET_DATA_TYPE = function () {\n  var version = this.dequeueInt();\n  var reqId = this.dequeueInt();\n  var marketDataType = this.dequeueInt();\n\n  this._emit('marketDataType', reqId, marketDataType);\n};\n\nIncoming.prototype._MARKET_DEPTH = function () {\n  var version = this.dequeueInt();\n  var id = this.dequeueInt();\n  var position = this.dequeueInt();\n  var operation = this.dequeueInt();\n  var side = this.dequeueInt();\n  var price = this.dequeueFloat();\n  var size = this.dequeueInt();\n\n  this._emit('updateMktDepth', id, position, operation, side, price, size);\n};\n\nIncoming.prototype._MARKET_DEPTH_L2 = function () {\n  var version = this.dequeueInt();\n  var id = this.dequeueInt();\n  var position = this.dequeueInt();\n  var marketMaker = this.dequeue();\n  var operation = this.dequeueInt();\n  var side = this.dequeueInt();\n  var price = this.dequeueFloat();\n  var size = this.dequeueInt();\n\n  this._emit('updateMktDepthL2', id, position, marketMaker, operation, side, price, size);\n};\n\nIncoming.prototype._NEWS_BULLETINS = function () {\n  var version = this.dequeueInt();\n  var newsMsgId = this.dequeueInt();\n  var newsMsgType = this.dequeueInt();\n  var newsMessage = this.dequeue();\n  var originatingExch = this.dequeue();\n\n  this._emit('updateNewsBulletin', newsMsgId, newsMsgType, newsMessage, originatingExch);\n};\n\nIncoming.prototype._NEXT_VALID_ID = function () {\n  var version = this.dequeueInt();\n  var orderId = this.dequeueInt();\n\n  this._emit('nextValidId', orderId);\n};\n\nIncoming.prototype._OPEN_ORDER = function () {\n  var i;\n\n  // read version\n  var version = this.dequeueInt();\n\n  // read order id\n  var order = {};\n  order.orderId = this.dequeueInt();\n\n  // read contract fields\n  var contract = {};\n\n  if (version >= 17) {\n    contract.conId = this.dequeueInt();\n  }\n\n  contract.symbol = this.dequeue();\n  contract.secType = this.dequeue();\n  contract.expiry = this.dequeue();\n  contract.strike = this.dequeueFloat();\n  contract.right = this.dequeue();\n\n  if (version >= 32) {\n    contract.multiplier = this.dequeue();\n  }\n\n  contract.exchange = this.dequeue();\n  contract.currency = this.dequeue();\n\n  if (version >= 2) {\n    contract.localSymbol = this.dequeue();\n  }\n\n  if (version >= 32) {\n    contract.tradingClass = this.dequeue();\n  }\n\n  // read order fields\n  order.action = this.dequeue();\n  order.totalQuantity = this.dequeueInt();\n  order.orderType = this.dequeue();\n\n  if (version < 29) {\n    order.lmtPrice = this.dequeueFloat();\n  } else {\n    order.lmtPrice = this.dequeueFloat() || Number.MAX_VALUE;\n  }\n\n  if (version < 30) {\n    order.auxPrice = this.dequeueFloat();\n  } else {\n    order.auxPrice = this.dequeueFloat() || Number.MAX_VALUE;\n  }\n\n  order.tif = this.dequeue();\n  order.ocaGroup = this.dequeue();\n  order.account = this.dequeue();\n  order.openClose = this.dequeue();\n  order.origin = this.dequeueInt();\n  order.orderRef = this.dequeue();\n\n  if (version >= 3) {\n    order.clientId = this.dequeueInt();\n  }\n\n  if (version >= 4) {\n    order.permId = this.dequeueInt();\n\n    if (version < 18) {\n      // will never happen\n      /* order.ignoreRth = */ this.dequeueBool();\n    } else {\n      order.outsideRth = this.dequeueBool();\n    }\n\n    order.hidden = this.dequeueBool();\n    order.discretionaryAmt = this.dequeueFloat();\n  }\n\n  if (version >= 5) {\n    order.goodAfterTime = this.dequeue();\n  }\n\n  if (version >= 6) {\n    // skip deprecated sharesAllocation field\n    this.dequeue();\n  }\n\n  if (version >= 7) {\n    order.faGroup = this.dequeue();\n    order.faMethod = this.dequeue();\n    order.faPercentage = this.dequeue();\n    order.faProfile = this.dequeue();\n  }\n\n  if (version >= 8) {\n    order.goodTillDate = this.dequeue();\n  }\n\n  if (version >= 9) {\n    order.rule80A = this.dequeue();\n    order.percentOffset = this.dequeueFloat() || Number.MAX_VALUE;\n    order.settlingFirm = this.dequeue();\n    order.shortSaleSlot = this.dequeueInt();\n    order.designatedLocation = this.dequeue();\n\n    if (this._controller._serverVersion === 51) {\n      this.dequeueInt();  // exemptCode\n    } else if (version >= 23) {\n      order.exemptCode = this.dequeueInt();\n    }\n\n    order.auctionStrategy = this.dequeueInt();\n    order.startingPrice = this.dequeueFloat() || Number.MAX_VALUE;\n    order.stockRefPrice = this.dequeueFloat() || Number.MAX_VALUE;\n    order.delta = this.dequeueFloat() || Number.MAX_VALUE;\n    order.stockRangeLower = this.dequeueFloat() || Number.MAX_VALUE;\n    order.stockRangeUpper = this.dequeueFloat() || Number.MAX_VALUE;\n    order.displaySize = this.dequeueInt();\n\n    if (version < 18) {\n      // will never happen\n      /* order.rthOnly = */ this.dequeueBool();\n    }\n\n    order.blockOrder = this.dequeueBool();\n    order.sweepToFill = this.dequeueBool();\n    order.allOrNone = this.dequeueBool();\n    order.minQty = this.dequeueInt() || Number.MAX_VALUE;\n    order.ocaType = this.dequeueInt();\n    order.eTradeOnly = this.dequeueBool();\n    order.firmQuoteOnly = this.dequeueBool();\n    order.nbboPriceCap = this.dequeueFloat() || Number.MAX_VALUE;\n  }\n\n  if (version >= 10) {\n    order.parentId = this.dequeueInt();\n    order.triggerMethod = this.dequeueInt();\n  }\n\n  var receivedInt;\n\n  if (version >= 11) {\n    order.volatility = this.dequeueFloat() || Number.MAX_VALUE;\n    order.volatilityType = this.dequeueInt();\n\n    if (version === 11) {\n      receivedInt = this.dequeueInt();\n      order.deltaNeutralOrderType = (receivedInt === 0 ? 'NONE' : 'MKT');\n    } else {  // version 12 and up\n      order.deltaNeutralOrderType = this.dequeue();\n      order.deltaNeutralAuxPrice = this.dequeueFloat() || Number.MAX_VALUE;\n\n      if (version >= 27 && !_.isEmpty(order.deltaNeutralOrderType)) {\n        order.deltaNeutralConId = this.dequeueInt();\n        order.deltaNeutralSettlingFirm = this.dequeue();\n        order.deltaNeutralClearingAccount = this.dequeue();\n        order.deltaNeutralClearingIntent = this.dequeue();\n      }\n\n      if (version >= 31 && !_.isEmpty(order.deltaNeutralOrderType)) {\n        order.deltaNeutralOpenClose = this.dequeue();\n        order.deltaNeutralShortSale = this.dequeueBool();\n        order.deltaNeutralShortSaleSlot = this.dequeueInt();\n        order.deltaNeutralDesignatedLocation = this.dequeue();\n      }\n    }\n\n    order.continuousUpdate = this.dequeueInt();\n\n    if (this._controller._serverVersion === 26) {\n      order.stockRangeLower = this.dequeueFloat();\n      order.stockRangeUpper = this.dequeueFloat();\n    }\n\n    order.referencePriceType = this.dequeueInt();\n  }\n\n  if (version >= 13) {\n    order.trailStopPrice = this.dequeueFloat() || Number.MAX_VALUE;\n  }\n\n  if (version >= 30) {\n    order.trailingPercent = this.dequeueFloat() || Number.MAX_VALUE;\n  }\n\n  if (version >= 14) {\n    order.basisPoints = this.dequeueFloat() || Number.MAX_VALUE;\n    order.basisPointsType = this.dequeueInt() || Number.MAX_VALUE;\n    contract.comboLegsDescrip = this.dequeue();\n  }\n\n  var comboLeg;\n  var comboLegsCount;\n  var orderComboLeg;\n  var orderComboLegsCount;\n  var price;\n\n  if (version >= 29) {\n    comboLegsCount = this.dequeueInt();\n\n    if (comboLegsCount > 0) {\n      contract.comboLegs = [];\n\n      for (i = 0; i < comboLegsCount; ++i) {\n        comboLeg = {};\n        comboLeg.conId = this.dequeueInt();\n        comboLeg.ratio = this.dequeueInt();\n        comboLeg.action = this.dequeue();\n        comboLeg.exchange = this.dequeue();\n        comboLeg.openClose = this.dequeueInt();\n        comboLeg.shortSaleSlot = this.dequeueInt();\n        comboLeg.designatedLocation = this.dequeue();\n        comboLeg.exemptCode = this.dequeueInt();\n        contract.comboLegs.push(comboLeg);\n      }\n    }\n\n    orderComboLegsCount = this.dequeueInt();\n\n    if (orderComboLegsCount > 0) {\n      order.orderComboLegs = [];\n\n      for (i = 0; i < orderComboLegsCount; ++i) {\n        orderComboLeg = {};\n        order.price = this.dequeueFloat() || Number.MAX_VALUE;\n        order.orderComboLegs.push(orderComboLeg);\n      }\n    }\n  }\n\n  var smartComboRoutingParamsCount;\n  var tagValue;\n\n  if (version >= 26) {\n    smartComboRoutingParamsCount = this.dequeueInt();\n    if (smartComboRoutingParamsCount > 0) {\n      order.smartComboRoutingParams = [];\n\n      for (i = 0; i < smartComboRoutingParamsCount; ++i) {\n        tagValue = {};\n        tagValue.tag = this.dequeue();\n        tagValue.value = this.dequeue();\n        order.smartComboRoutingParams.push(tagValue);\n      }\n    }\n  }\n\n  if (version >= 15) {\n    if (version >= 20) {\n      order.scaleInitLevelSize = this.dequeueInt() || Number.MAX_VALUE;\n      order.scaleSubsLevelSize = this.dequeueInt() || Number.MAX_VALUE;\n    } else {\n      /* int notSuppScaleNumComponents = */ this.dequeueInt() || Number.MAX_VALUE;\n      order.scaleInitLevelSize = this.dequeueInt() || Number.MAX_VALUE;\n    }\n    order.scalePriceIncrement = this.dequeueFloat() || Number.MAX_VALUE;\n  }\n\n  if (version >= 28 && order.scalePriceIncrement > 0.0 && order.scalePriceIncrement !== Number.MAX_VALUE) {\n    order.scalePriceAdjustValue = this.dequeueFloat() || Number.MAX_VALUE;\n    order.scalePriceAdjustInterval = this.dequeueInt() || Number.MAX_VALUE;\n    order.scaleProfitOffset = this.dequeueFloat() || Number.MAX_VALUE;\n    order.scaleAutoReset = this.dequeueBool();\n    order.scaleInitPosition = this.dequeueInt() || Number.MAX_VALUE;\n    order.scaleInitFillQty = this.dequeueInt() || Number.MAX_VALUE;\n    order.scaleRandomPercent = this.dequeueBool();\n  }\n\n  if (version >= 24) {\n    order.hedgeType = this.dequeue();\n\n    if (!_.isEmpty(order.hedgeType)) {\n      order.hedgeParam = this.dequeue();\n    }\n  }\n\n  if (version >= 25) {\n    order.optOutSmartRouting = this.dequeueBool();\n  }\n\n  if (version >= 19) {\n    order.clearingAccount = this.dequeue();\n    order.clearingIntent = this.dequeue();\n  }\n\n  if (version >= 22) {\n    order.notHeld = this.dequeueBool();\n  }\n\n  var underComp;\n\n  if (version >= 20) {\n    if (this.dequeueBool()) {\n      underComp = {};\n      underComp.conId = this.dequeueInt();\n      underComp.delta = this.dequeueFloat();\n      underComp.price = this.dequeueFloat();\n      contract.underComp = underComp;\n    }\n  }\n\n  var algoParamsCount;\n\n  if (version >= 21) {\n    order.algoStrategy = this.dequeue();\n\n    if (!_.isEmpty(order.algoStrategy)) {\n      algoParamsCount = this.dequeueInt();\n\n      if (algoParamsCount > 0) {\n        order.algoParams = [];\n\n        for (i = 0; i < algoParamsCount; ++i) {\n          tagValue = {};\n          tagValue.tag = this.dequeue();\n          tagValue.value = this.dequeue();\n          order.algoParams.push(tagValue);\n        }\n      }\n    }\n  }\n\n  var orderState = {};\n\n  if (version >= 16) {\n    order.whatIf = this.dequeueBool();\n    orderState.status = this.dequeue();\n    orderState.initMargin = this.dequeue();\n    orderState.maintMargin = this.dequeue();\n    orderState.equityWithLoan = this.dequeue();\n    orderState.commission = this.dequeueFloat() || Number.MAX_VALUE;\n    orderState.minCommission = this.dequeueFloat() || Number.MAX_VALUE;\n    orderState.maxCommission = this.dequeueFloat() || Number.MAX_VALUE;\n    orderState.commissionCurrency = this.dequeue();\n    orderState.warningText = this.dequeue();\n  }\n\n  this._emit('openOrder', order.orderId, contract, order, orderState);\n};\n\nIncoming.prototype._OPEN_ORDER_END = function () {\n  var version = this.dequeueInt();\n\n  this._emit('openOrderEnd');\n};\n\nIncoming.prototype._ORDER_STATUS = function () {\n  var version = this.dequeueInt();\n  var id = this.dequeueInt();\n  var status = this.dequeue();\n  var filled = this.dequeueInt();\n  var remaining = this.dequeueInt();\n  var avgFillPrice = this.dequeueFloat();\n\n  var permId = 0;\n\n  if (version >= 2) {\n    permId = this.dequeueInt();\n  }\n\n  var parentId = 0;\n\n  if (version >= 3) {\n    parentId = this.dequeueInt();\n  }\n\n  var lastFillPrice = 0;\n\n  if (version >= 4) {\n    lastFillPrice = this.dequeueFloat();\n  }\n\n  var clientId = 0;\n\n  if (version >= 5) {\n    clientId = this.dequeueInt();\n  }\n\n  var whyHeld = null;\n\n  if (version >= 6) {\n    whyHeld = this.dequeue();\n  }\n\n  this._emit('orderStatus', id, status, filled, remaining, avgFillPrice,\n                                       permId, parentId, lastFillPrice, clientId, whyHeld);\n};\n\nIncoming.prototype._PORTFOLIO_VALUE = function () {\n  var version = this.dequeueInt();\n\n  var contract = {};\n\n  if (version >= 6) {\n    contract.conId = this.dequeueInt();\n  }\n\n  contract.symbol = this.dequeue();\n  contract.secType = this.dequeue();\n  contract.expiry = this.dequeue();\n  contract.strike = this.dequeueFloat();\n  contract.right = this.dequeue();\n\n  if (version >= 7) {\n    contract.multiplier = this.dequeue();\n    contract.primaryExch = this.dequeue();\n  }\n\n  contract.currency = this.dequeue();\n\n  if (version >= 2) {\n    contract.localSymbol = this.dequeue();\n  }\n\n  if (version >= 8) {\n    contract.tradingClass = this.dequeue();\n  }\n\n  var position = this.dequeueInt();\n  var marketPrice = this.dequeueFloat();\n  var marketValue = this.dequeueFloat();\n  var averageCost = 0.0;\n  var unrealizedPNL = 0.0;\n  var realizedPNL = 0.0;\n\n  if (version >= 3) {\n    averageCost = this.dequeueFloat();\n    unrealizedPNL = this.dequeueFloat();\n    realizedPNL = this.dequeueFloat();\n  }\n\n  var accountName = null;\n\n  if (version >= 4) {\n    accountName = this.dequeue();\n  }\n\n  if (version === 6 && this._controller._serverVersion === 39) {\n    contract.primaryExch = this.dequeue();\n  }\n\n  this._emit('updatePortfolio', contract, position, marketPrice, marketValue,\n                                           averageCost, unrealizedPNL, realizedPNL, accountName);\n};\n\nIncoming.prototype._POSITION = function () {\n  var version = this.dequeueInt();\n  var account = this.dequeue();\n  var contract = {};\n\n  contract.conId = this.dequeueInt();\n  contract.symbol = this.dequeue();\n  contract.secType = this.dequeue();\n  contract.expiry = this.dequeue();\n  contract.strike = this.dequeueFloat();\n  contract.right = this.dequeue();\n  contract.multiplier = this.dequeue();\n  contract.exchange = this.dequeue();\n  contract.currency = this.dequeue();\n  contract.localSymbol = this.dequeue();\n  if (version >= 2) {\n    contract.tradingClass = this.dequeue();\n  }\n\n  var pos = this.dequeueInt();\n  var avgCost = 0;\n  if (version >= 3) {\n    avgCost = this.dequeueFloat();\n  }\n\n  this._emit('position', account, contract, pos, avgCost);\n};\n\nIncoming.prototype._POSITION_END = function () {\n  var version = this.dequeueInt();\n\n  this._emit('positionEnd');\n};\n\nIncoming.prototype._REAL_TIME_BARS = function () {\n  var version = this.dequeueInt();\n  var reqId = this.dequeueInt();\n  var time = this.dequeueInt();\n  var open = this.dequeueFloat();\n  var high = this.dequeueFloat();\n  var low = this.dequeueFloat();\n  var close = this.dequeueFloat();\n  var volume = this.dequeueInt();\n  var wap = this.dequeueFloat();\n  var count = this.dequeueInt();\n\n  this._emit('realtimeBar', reqId, time, open, high, low, close, volume, wap, count);\n};\n\nIncoming.prototype._RECEIVE_FA = function () {\n  var version = this.dequeueInt();\n  var faDataType = this.dequeueInt();\n  var xml = this.dequeue();\n\n  this._emit('receiveFA', faDataType, xml);\n};\n\nIncoming.prototype._SCANNER_DATA = function () {\n  var version = this.dequeueInt();\n  var tickerId = this.dequeueInt();\n  var numberOfElements = this.dequeueInt();\n\n  var rank;\n\n  while (numberOfElements--) {\n    var contract = {\n      summary: {}\n    };\n    rank = this.dequeueInt();\n    if (version >= 3) {\n      contract.summary.conId = this.dequeueInt();\n    }\n\n    contract.summary.symbol = this.dequeue();\n    contract.summary.secType = this.dequeue();\n    contract.summary.expiry = this.dequeue();\n    contract.summary.strike = this.dequeueFloat();\n    contract.summary.right = this.dequeue();\n    contract.summary.exchange = this.dequeue();\n    contract.summary.currency = this.dequeue();\n    contract.summary.localSymbol = this.dequeue();\n    contract.marketName = this.dequeue();\n    contract.summary.tradingClass = this.dequeue();\n\n    var distance = this.dequeue();\n    var benchmark = this.dequeue();\n    var projection = this.dequeue();\n    var legsStr = null;\n\n    if (version >= 2) {\n      legsStr = this.dequeue();\n    }\n\n    this._emit('scannerData', tickerId, rank, contract, distance,\n                                         benchmark, projection, legsStr);\n  }\n\n  this._emit('scannerDataEnd', tickerId);\n};\n\nIncoming.prototype._SCANNER_PARAMETERS = function () {\n  var version = this.dequeueInt();\n  var xml = this.dequeue();\n\n  this._emit('scannerParameters', xml);\n};\n\nIncoming.prototype._TICK_EFP = function () {\n  var version = this.dequeueInt();\n  var tickerId = this.dequeueInt();\n  var tickType = this.dequeueInt();\n  var basisPoints = this.dequeueFloat();\n  var formattedBasisPoints = this.dequeue();\n  var impliedFuturesPrice = this.dequeueFloat();\n  var holdDays = this.dequeueInt();\n  var futureExpiry = this.dequeue();\n  var dividendImpact = this.dequeueFloat();\n  var dividendsToExpiry = this.dequeueFloat();\n\n  this._emit('tickEFP', tickerId, tickType, basisPoints, formattedBasisPoints,\n                                   impliedFuturesPrice, holdDays, futureExpiry,\n                                   dividendImpact, dividendsToExpiry);\n};\n\nIncoming.prototype._TICK_GENERIC = function () {\n  var version = this.dequeueInt();\n  var tickerId = this.dequeueInt();\n  var tickType = this.dequeueInt();\n  var value = this.dequeueFloat();\n\n  this._emit('tickGeneric', tickerId, tickType, value);\n};\n\nIncoming.prototype._TICK_OPTION_COMPUTATION = function () {\n  var version = this.dequeueInt();\n  var tickerId = this.dequeueInt();\n  var tickType = this.dequeueInt();\n  var impliedVol = this.dequeueFloat();\n\n  if (impliedVol < 0) {  // -1 is the \"not yet computed\" indicator\n    impliedVol = Number.MAX_VALUE;\n  }\n\n  var delta = this.dequeueFloat();\n\n  if (Math.abs(delta) > 1) {  // -2 is the \"not yet computed\" indicator\n    delta = Number.MAX_VALUE;\n  }\n\n  var optPrice = Number.MAX_VALUE;\n  var pvDividend = Number.MAX_VALUE;\n  var gamma = Number.MAX_VALUE;\n  var vega = Number.MAX_VALUE;\n  var theta = Number.MAX_VALUE;\n  var undPrice = Number.MAX_VALUE;\n\n  if (version >= 6 || tickType == C.TICK_TYPE.MODEL_OPTION) {  // introduced in version == 5\n    optPrice = this.dequeueFloat();\n\n    if (optPrice < 0) {  // -1 is the \"not yet computed\" indicator\n      optPrice = Number.MAX_VALUE;\n    }\n\n    pvDividend = this.dequeueFloat();\n\n    if (pvDividend < 0) {  // -1 is the \"not yet computed\" indicator\n      pvDividend = Number.MAX_VALUE;\n    }\n  }\n\n  if (version >= 6) {\n    gamma = this.dequeueFloat();\n\n    if (Math.abs(gamma) > 1) {  // -2 is the \"not yet computed\" indicator\n      gamma = Number.MAX_VALUE;\n    }\n\n    vega = this.dequeueFloat();\n\n    if (Math.abs(vega) > 1) {  // -2 is the \"not yet computed\" indicator\n      vega = Number.MAX_VALUE;\n    }\n\n    theta = this.dequeueFloat();\n\n    if (Math.abs(theta) > 1) {  // -2 is the \"not yet computed\" indicator\n      theta = Number.MAX_VALUE;\n    }\n\n    undPrice = this.dequeueFloat();\n\n    if (undPrice < 0) {  // -1 is the \"not yet computed\" indicator\n      undPrice = Number.MAX_VALUE;\n    }\n  }\n\n  this._emit('tickOptionComputation', tickerId, tickType, impliedVol, delta, optPrice, pvDividend, gamma, vega, theta, undPrice);\n};\n\nIncoming.prototype._TICK_PRICE = function () {\n  var version = this.dequeueInt();\n  var tickerId = this.dequeueInt();\n  var tickType = this.dequeueInt();\n  var price = this.dequeueFloat();\n  var size = 0;\n\n  if (version >= 2) {\n    size = this.dequeueInt();\n  }\n\n  var canAutoExecute = 0;\n\n  if (version >= 3) {\n    canAutoExecute = this.dequeueBool();\n  }\n\n  this._emit('tickPrice', tickerId, tickType, price, canAutoExecute);\n\n  var sizeTickType = -1;\n\n  if (version >= 2) {\n    sizeTickType = -1 ; // not a tick\n\n    switch (tickType) {\n    case 1:  // BID\n      sizeTickType = 0;  // BID_SIZE\n      break;\n    case 2:  // ASK\n      sizeTickType = 3;  // ASK_SIZE\n      break;\n    case 4:  // LAST\n      sizeTickType = 5;  // LAST_SIZE\n      break;\n    default:\n      break;\n    }\n\n    if (sizeTickType != -1) {\n      this._emit('tickSize', tickerId, sizeTickType, size);\n    }\n  }\n};\n\nIncoming.prototype._TICK_SIZE = function () {\n  var version = this.dequeueInt();\n  var tickerId = this.dequeueInt();\n  var tickType = this.dequeueInt();\n  var size = this.dequeueInt();\n\n  this._emit('tickSize', tickerId, tickType, size);\n};\n\nIncoming.prototype._TICK_SNAPSHOT_END = function () {\n  var version = this.dequeueInt();\n  var reqId = this.dequeueInt();\n\n  this._emit('tickSnapshotEnd', reqId);\n};\n\nIncoming.prototype._TICK_STRING = function () {\n  var version = this.dequeueInt();\n  var tickerId = this.dequeueInt();\n  var tickType = this.dequeueInt();\n  var value = this.dequeue();\n\n  this._emit('tickString', tickerId, tickType, value);\n};\n\nIncoming.prototype._emit = function () {\n  this._emitQueue.push(arguments);\n};\n\nIncoming.prototype.dequeue = function () {\n  if (this._dataQueue.length == 0) {\n    throw new errors.UnderrunError();\n  }\n  var result = this._dataQueue.shift();\n  return result;\n};\n\nIncoming.prototype.dequeueBool = function () {\n  return !!parseInt(this.dequeue(), 10);\n};\n\nIncoming.prototype.dequeueFloat = function () {\n  return parseFloat(this.dequeue());\n};\n\nIncoming.prototype.dequeueInt = function () {\n  return parseInt(this.dequeue(), 10);\n};\n\nIncoming.prototype.enqueue = function (tokens) {\n  this._dataQueue = this._dataQueue.concat(tokens);\n};\n\nIncoming.prototype.process = function () {\n  var constKey;\n  var token;\n  var dataQueueSnapshot;\n\n  while (true) {\n    dataQueueSnapshot = this._dataQueue.slice();\n\n    try {\n      // Clear the Emit Queue; if this doesn't get cleared, it piles up whenever there's an error (added by heberallred)\n      this._emitQueue = [];\n\n      token = this.dequeueInt();\n      constKey = this._controller._ib.util.incomingToString(token);\n\n      if (constKey && _.has(this.constructor.prototype, '_' + constKey) && _.isFunction(this['_' + constKey])) {\n        this['_' + constKey]();\n      } else {\n        this._controller.emitError('Unknown incoming first token: ' + token);\n      }\n    } catch (e) {\n      if (!(e instanceof errors.UnderrunError)) {\n        throw e;\n      }\n      // Put data back in the queue, and don't emit any events.\n      this._dataQueue = this._dataQueue.concat(dataQueueSnapshot);\n      return;\n    }\n    // Drain _emitQueue.\n    var self = this;\n    var toEmit = this._emitQueue;\n    this._emitQueue = [];\n    _.forEach(toEmit, function (payload) {\n      self._controller.emit.apply(self._controller, payload);\n    });\n  }\n};\n\nmodule.exports = Incoming;\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/errors.js":"function UnderrunError(message) {\n  this.name = 'UnderrunError';\n  this.message = message || 'An underrun error has occurred';\n  this.stack = (new Error()).stack;\n}\nUnderrunError.prototype = Object.create(Error.prototype);\nUnderrunError.prototype.constructor = UnderrunError;\n\nmodule.exports = {\n  UnderrunError: UnderrunError\n};\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/outgoing.js":"var _ = require('lodash');\n\nvar rateLimit = require('function-rate-limit');\n\nvar C = require('./constants');\n\nfunction _nullifyMax(number) {\n  if (number === Number.MAX_VALUE) {\n    return null;\n  } else {\n    return number;\n  }\n}\n\nfunction Outgoing(controller) {\n  this._controller = controller;\n}\n\nOutgoing.prototype._send = rateLimit(C.MAX_REQ_PER_SECOND, 1000, function () {\n  var args = Array.prototype.slice.call(arguments);\n  this._controller.run('send', _.flatten(args));\n});\n\nOutgoing.prototype.calculateImpliedVolatility = function (reqId, contract, optionPrice, underPrice) {\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.REQ_CALC_IMPLIED_VOLAT) {\n    return this._controller.emitError('It does not support calculate implied volatility requests.');\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.TRADING_CLASS) {\n    if (!_.isEmpty(contract.tradingClass)) {\n      return this._controller.emitError('It does not support tradingClass parameter in calculateImpliedVolatility.');\n    }\n  }\n\n  var version = 2;\n\n  var args = [C.OUTGOING.REQ_CALC_IMPLIED_VOLAT, version, reqId];\n\n  // send contract fields\n  args.push(contract.conId);\n  args.push(contract.symbol);\n  args.push(contract.secType);\n  args.push(contract.expiry);\n  args.push(contract.strike);\n  args.push(contract.right);\n  args.push(contract.multiplier);\n  args.push(contract.exchange);\n  args.push(contract.primaryExch);\n  args.push(contract.currency);\n  args.push(contract.localSymbol);\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.TRADING_CLASS) {\n    args.push(contract.tradingClass);\n  }\n\n  args.push(optionPrice);\n  args.push(underPrice);\n\n  this._send(args);\n};\n\nOutgoing.prototype.calculateOptionPrice = function (reqId, contract, volatility, underPrice) {\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.REQ_CALC_OPTION_PRICE) {\n    return this._controller.emitError('It does not support calculate option price requests.');\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.TRADING_CLASS) {\n    if (!_.isEmpty(contract.tradingClass)) {\n      return this._controller.emitError('It does not support tradingClass parameter in calculateOptionPrice.');\n    }\n  }\n\n  var version = 2;\n\n  var args = [C.OUTGOING.REQ_CALC_OPTION_PRICE, version, reqId];\n\n  // send contract fields\n  args.push(contract.conId);\n  args.push(contract.symbol);\n  args.push(contract.secType);\n  args.push(contract.expiry);\n  args.push(contract.strike);\n  args.push(contract.right);\n  args.push(contract.multiplier);\n  args.push(contract.exchange);\n  args.push(contract.primaryExch);\n  args.push(contract.currency);\n  args.push(contract.localSymbol);\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.TRADING_CLASS) {\n    args.push(contract.tradingClass);\n  }\n\n  args.push(volatility);\n  args.push(underPrice);\n\n  this._send(args);\n};\n\nOutgoing.prototype.cancelAccountSummary = function (reqId) {\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.ACCT_SUMMARY) {\n    return this._controller.emitError('It does not support account summary cancellation.');\n  }\n\n  var version = 1;\n\n  this._send(C.OUTGOING.CANCEL_ACCOUNT_SUMMARY, version, reqId);\n};\n\nOutgoing.prototype.cancelCalculateImpliedVolatility = function (reqId) {\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.CANCEL_CALC_IMPLIED_VOLAT) {\n    return this._controller.emitError('It does not support calculate implied volatility cancellation.');\n  }\n\n  var version = 1;\n\n  this._send(C.OUTGOING.CANCEL_CALC_IMPLIED_VOLAT, version, reqId);\n};\n\nOutgoing.prototype.cancelCalculateOptionPrice = function (reqId) {\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.CANCEL_CALC_OPTION_PRICE) {\n    return this._controller.emitError('It does not support calculate option price cancellation.');\n  }\n\n  var version = 1;\n\n  this._send(C.OUTGOING.CANCEL_CALC_OPTION_PRICE, version, reqId);\n};\n\nOutgoing.prototype.cancelFundamentalData = function (reqId) {\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.FUNDAMENTAL_DATA) {\n    return this._controller.emitError('It does not support fundamental data requests.');\n  }\n\n  var version = 1;\n\n  this._send(C.OUTGOING.CANCEL_FUNDAMENTAL_DATA, version, reqId);\n};\n\nOutgoing.prototype.cancelHistoricalData = function (tickerId) {\n  if (this._controller._serverVersion < 24) {\n    return this._controller.emitError('It does not support historical data query cancellation.');\n  }\n\n  var version = 1;\n\n  this._send(C.OUTGOING.CANCEL_HISTORICAL_DATA, version, tickerId);\n};\n\nOutgoing.prototype.cancelMktData = function (tickerId) {\n  var version = 1;\n\n  this._send(C.OUTGOING.CANCEL_MKT_DATA, version, tickerId);\n};\n\nOutgoing.prototype.cancelMktDepth = function (tickerId) {\n  if (this._controller._serverVersion < 6) {\n    return this._controller.emitError('This feature is only available for versions of TWS >=6.');\n  }\n\n  var version = 1;\n\n  this._send(C.OUTGOING.CANCEL_MKT_DEPTH, version, tickerId);\n};\n\nOutgoing.prototype.cancelNewsBulletins = function () {\n  var version = 1;\n\n  this._send(C.OUTGOING.CANCEL_NEWS_BULLETINS, version);\n};\n\nOutgoing.prototype.cancelOrder = function (id) {\n  var version = 1;\n\n  this._send(C.OUTGOING.CANCEL_ORDER, version, id);\n};\n\nOutgoing.prototype.cancelPositions = function () {\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.ACCT_SUMMARY) {\n    return this._controller.emitError('It does not support position cancellation.');\n  }\n\n  var version = 1;\n\n  this._send(C.OUTGOING.CANCEL_POSITIONS, version);\n};\n\nOutgoing.prototype.cancelRealTimeBars = function (tickerId) {\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.REAL_TIME_BARS) {\n    return this._controller.emitError('It does not support realtime bar data query cancellation.');\n  }\n\n  var version = 1;\n\n  this._send(C.OUTGOING.CANCEL_REAL_TIME_BARS, version, tickerId);\n};\n\nOutgoing.prototype.cancelScannerSubscription = function (tickerId) {\n  if (this._controller._serverVersion < 24) {\n    return this._controller.emitError('It does not support API scanner subscription.');\n  }\n\n  var version = 1;\n\n  this._send(C.OUTGOING.CANCEL_SCANNER_SUBSCRIPTION, version, tickerId);\n};\n\nOutgoing.prototype.exerciseOptions = function (tickerId, contract, exerciseAction, exerciseQuantity,\n                                               account, override) {\n  var version = 2;\n\n  if (this._controller._serverVersion < 21) {\n    return this._controller.emitError('It does not support options exercise from the API.');\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.TRADING_CLASS) {\n    if (!_.isEmpty(contract.tradingClass) || contract.conId > 0) {\n      return this._controller.emitError('It does not support conId and tradingClass parameters in exerciseOptions.');\n    }\n  }\n\n  var args = [C.OUTGOING.EXERCISE_OPTIONS, version, tickerId];\n\n  // send contract fields\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.TRADING_CLASS) {\n    args.push(contract.conId);\n  }\n\n  args.push(contract.symbol);\n  args.push(contract.secType);\n  args.push(contract.expiry);\n  args.push(contract.strike);\n  args.push(contract.right);\n  args.push(contract.multiplier);\n  args.push(contract.exchange);\n  args.push(contract.currency);\n  args.push(contract.localSymbol);\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.TRADING_CLASS) {\n    args.push(contract.tradingClass);\n  }\n\n  args.push(exerciseAction);\n  args.push(exerciseQuantity);\n  args.push(account);\n  args.push(override);\n\n  this._send(args);\n};\n\nOutgoing.prototype.placeOrder = function (id, contract, order) {\n\n\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.SCALE_ORDERS) {\n    if (order.scaleInitLevelSize != Number.MAX_VALUE ||\n        order.scalePriceIncrement != Number.MAX_VALUE) {\n      return this._controller.emitError('It does not support Scale orders.');\n    }\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.SSHORT_COMBO_LEGS) {\n    if (_.isArray(contract.comboLegs)) {\n      contract.comboLegs.forEach(function (comboLeg) {\n        if (comboLeg.shortSaleSlot !== 0 || !_.isEmpty(comboLeg.designatedLocation)) {\n          return this._controller.emitError('It does not support SSHORT flag for combo legs.');\n        }\n      }.bind(this));\n    }\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.WHAT_IF_ORDERS) {\n    if (order.whatIf) {\n      return this._controller.emitError('It does not support what-if orders.');\n    }\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.UNDER_COMP) {\n    if (contract.underComp) {\n      return this._controller.emitError('It does not support delta-neutral orders.');\n    }\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.SCALE_ORDERS2) {\n    if (order.scaleSubsLevelSize !== Number.MAX_VALUE) {\n      return this._controller.emitError('It does not support Subsequent Level Size for Scale orders.');\n    }\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.ALGO_ORDERS) {\n    if (!_.isEmpty(order.algoStrategy)) {\n      return this._controller.emitError('It does not support algo orders.');\n    }\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.NOT_HELD) {\n    if (order.notHeld) {\n      return this._controller.emitError('It does not support notHeld parameter.');\n    }\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.SEC_ID_TYPE) {\n    if (!_.isEmpty(contract.secIdType) || !_.isEmpty(contract.secId)) {\n      return this._controller.emitError('It does not support secIdType and secId parameters.');\n    }\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.PLACE_ORDER_CONID) {\n    if (contract.conId > 0) {\n      return this._controller.emitError('It does not support conId parameter.');\n    }\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.SSHORTX) {\n    if (order.exemptCode !== -1) {\n      return this._controller.emitError('It does not support exemptCode parameter.');\n    }\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.SSHORTX) {\n    if (_.isArray(contract.comboLegs)) {\n      contract.comboLegs.forEach(function (comboLeg) {\n        if (comboLeg.exemptCode !== -1) {\n          return this._controller.emitError('It does not support exemptCode parameter.');\n        }\n      }.bind(this));\n    }\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.HEDGE_ORDERS) {\n    if (!_.isEmpty(order.hedgeType)) {\n      return this._controller.emitError('It does not support hedge orders.');\n    }\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.OPT_OUT_SMART_ROUTING) {\n    if (order.optOutSmartRouting) {\n      return this._controller.emitError('It does not support optOutSmartRouting parameter.');\n    }\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.DELTA_NEUTRAL_CONID) {\n    if (order.deltaNeutralConId > 0 ||\n        !_.isEmpty(order.deltaNeutralSettlingFirm) ||\n        !_.isEmpty(order.deltaNeutralClearingAccount) ||\n        !_.isEmpty(order.deltaNeutralClearingIntent)) {\n      return this._controller.emitError('It does not support deltaNeutral parameters: ConId, SettlingFirm, ClearingAccount, ClearingIntent.');\n    }\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.DELTA_NEUTRAL_OPEN_CLOSE) {\n    if (!_.isEmpty(order.deltaNeutralOpenClose) ||\n        order.deltaNeutralShortSale ||\n        order.deltaNeutralShortSaleSlot > 0 ||\n        !_.isEmpty(order.deltaNeutralDesignatedLocation)) {\n      return this._controller.emitError('It does not support deltaNeutral parameters: OpenClose, ShortSale, ShortSaleSlot, DesignatedLocation.');\n    }\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.SCALE_ORDERS3) {\n    if (order.scalePriceIncrement > 0 && order.scalePriceIncrement != Number.MAX_VALUE) {\n      if (order.scalePriceAdjustValue !== Number.MAX_VALUE ||\n          order.scalePriceAdjustInterval !== Number.MAX_VALUE ||\n          order.scaleProfitOffset !== Number.MAX_VALUE ||\n          order.scaleAutoReset ||\n          order.scaleInitPosition !== Number.MAX_VALUE ||\n          order.scaleInitFillQty !== Number.MAX_VALUE ||\n          order.scaleRandomPercent) {\n        return this._controller.emitError('It does not support Scale order parameters: PriceAdjustValue, PriceAdjustInterval, ProfitOffset, AutoReset, InitPosition, InitFillQty and RandomPercent');\n      }\n    }\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.ORDER_COMBO_LEGS_PRICE &&\n      _.isString(contract.secType) &&\n      C.BAG_SEC_TYPE.toUpperCase() === contract.secType.toUpperCase()) {\n    if (_.isArray(order.orderComboLegs)) {\n      order.orderComboLegs.forEach(function (orderComboLeg) {\n        if (orderComboLeg.price !== Number.MAX_VALUE) {\n          return this._controller.emitError('It does not support per-leg prices for order combo legs.');\n        }\n      }.bind(this));\n    }\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.TRAILING_PERCENT) {\n    if (order.trailingPercent !== Number.MAX_VALUE) {\n      return this._controller.emitError('It does not support trailing percent parameter.');\n    }\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.TRADING_CLASS) {\n    if (!_.isEmpty(contract.tradingClass)) {\n      return this._controller.emitError('It does not support tradingClass parameters in placeOrder.');\n    }\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.SCALE_TABLE) {\n    if (!_.isEmpty(order.scaleTable) ||\n        !_.isEmpty(order.activeStartTime) ||\n        !_.isEmpty(order.activeStopTime)) {\n      return this._controller.emitError('It does not support scaleTable, activeStartTime and activeStopTime parameters.');\n    }\n  }\n\n  var version = (this._controller._serverVersion < C.MIN_SERVER_VER.NOT_HELD ? 27 : 41);\n\n  // send place order msg\n  var args = [C.OUTGOING.PLACE_ORDER, version, id];\n\n  // send contract fields\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.PLACE_ORDER_CONID) {\n    args.push(contract.conId);\n  }\n  args.push(contract.symbol);\n  args.push(contract.secType);\n  args.push(contract.expiry);\n  args.push(contract.strike);\n  args.push(contract.right);\n  if (this._controller._serverVersion >= 15) {\n    args.push(contract.multiplier);\n  }\n  args.push(contract.exchange);\n  if (this._controller._serverVersion >= 14) {\n    args.push(contract.primaryExch);\n  }\n  args.push(contract.currency);\n  if (this._controller._serverVersion >= 2) {\n    args.push(contract.localSymbol);\n  }\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.TRADING_CLASS) {\n    args.push(contract.tradingClass);\n  }\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.SEC_ID_TYPE){\n    args.push(contract.secIdType);\n    args.push(contract.secId);\n  }\n\n  // send main order fields\n  args.push(order.action);\n  args.push(order.totalQuantity);\n  args.push(order.orderType);\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.ORDER_COMBO_LEGS_PRICE) {\n    args.push(order.lmtPrice === Number.MAX_VALUE ? 0 : order.lmtPrice);\n  } else {\n    args.push(_nullifyMax(order.lmtPrice));\n  }\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.TRAILING_PERCENT) {\n    args.push(order.auxPrice === Number.MAX_VALUE ? 0 : order.auxPrice);\n  } else {\n    args.push(_nullifyMax(order.auxPrice));\n  }\n\n  // send extended order fields\n  args.push(order.tif);\n  args.push(order.ocaGroup);\n  args.push(order.account);\n  args.push(order.openClose);\n  args.push(order.origin);\n  args.push(order.orderRef);\n  args.push(order.transmit);\n  if (this._controller._serverVersion >= 4) {\n    args.push(order.parentId);\n  }\n\n  if (this._controller._serverVersion >= 5) {\n    args.push(order.blockOrder);\n    args.push(order.sweepToFill);\n    args.push(order.displaySize);\n    args.push(order.triggerMethod);\n    if (this._controller._serverVersion < 38) {\n      // will never happen\n      args.push(/* order.ignoreRth */ false);\n    } else {\n      args.push(order.outsideRth);\n    }\n  }\n\n  if (this._controller._serverVersion >= 7) {\n    args.push(order.hidden);\n  }\n\n  // Send combo legs for BAG requests\n  if (this._controller._serverVersion >= 8 &&\n      _.isString(contract.secType) &&\n      C.BAG_SEC_TYPE.toUpperCase() === contract.secType.toUpperCase()) {\n    if (!_.isArray(contract.comboLegs)) {\n      args.push(0);\n    } else {\n      args.push(contract.comboLegs.length);\n\n      contract.comboLegs.forEach(function (comboLeg) {\n        args.push(comboLeg.conId);\n        args.push(comboLeg.ratio);\n        args.push(comboLeg.action);\n        args.push(comboLeg.exchange);\n        args.push(comboLeg.openClose);\n\n        if (this._controller._serverVersion >= C.MIN_SERVER_VER.SSHORT_COMBO_LEGS) {\n          args.push(comboLeg.shortSaleSlot);\n          args.push(comboLeg.designatedLocation);\n        }\n        if (this._controller._serverVersion >= C.MIN_SERVER_VER.SSHORTX_OLD) {\n          args.push(comboLeg.exemptCode);\n        }\n      }.bind(this));\n    }\n  }\n\n  // Send order combo legs for BAG requests\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.ORDER_COMBO_LEGS_PRICE &&\n      _.isString(contract.secType) &&\n      C.BAG_SEC_TYPE.toUpperCase() === contract.secType.toUpperCase()) {\n    if (!_.isArray(order.orderComboLegs)) {\n      args.push(0);\n    } else {\n      args.push(order.orderComboLegs.length);\n      order.orderComboLegs.forEach(function (orderComboLeg) {\n        args.push(_nullifyMax(orderComboLeg.price));\n      });\n    }\n  }\n\n  var smartComboRoutingParamsCount;\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.SMART_COMBO_ROUTING_PARAMS &&\n      _.isString(contract.secType) &&\n      C.BAG_SEC_TYPE.toUpperCase() === contract.secType.toUpperCase()) {\n    smartComboRoutingParamsCount = !_.isArray(order.smartComboRoutingParams) ? 0 : order.smartComboRoutingParams.length;\n    args.push(smartComboRoutingParamsCount);\n\n    if (smartComboRoutingParamsCount > 0) {\n      order.smartComboRoutingParams.forEach(function (tagValue) {\n        args.push(tagValue.tag);\n        args.push(tagValue.value);\n      });\n    }\n  }\n\n  if (this._controller._serverVersion >= 9) {\n    // send deprecated sharesAllocation field\n    args.push('');\n  }\n\n  if (this._controller._serverVersion >= 10) {\n    args.push(order.discretionaryAmt);\n  }\n\n  if (this._controller._serverVersion >= 11) {\n    args.push(order.goodAfterTime);\n  }\n\n  if (this._controller._serverVersion >= 12) {\n    args.push(order.goodTillDate);\n  }\n\n  if (this._controller._serverVersion >= 13) {\n    args.push(order.faGroup);\n    args.push(order.faMethod);\n    args.push(order.faPercentage);\n    args.push(order.faProfile);\n  }\n\n  if (this._controller._serverVersion >= 18) {  // institutional short sale slot fields.\n    args.push(order.shortSaleSlot);       // 0 only for retail, 1 or 2 only for institution.\n    args.push(order.designatedLocation);  // only populate when order.shortSaleSlot = 2.\n  }\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.SSHORTX_OLD) {\n    args.push(order.exemptCode);\n  }\n\n  var lower;\n  var upper;\n\n  if (this._controller._serverVersion >= 19) {\n    args.push(order.ocaType);\n\n    if (this._controller._serverVersion < 38) {\n      // will never happen\n      args.push(/* order.rthOnly */ false);\n    }\n\n    args.push(order.rule80A);\n    args.push(order.settlingFirm);\n    args.push(order.allOrNone);\n    args.push(_nullifyMax(order.minQty));\n    args.push(_nullifyMax(order.percentOffset));\n    args.push(order.eTradeOnly);\n    args.push(order.firmQuoteOnly);\n    args.push(_nullifyMax(order.nbboPriceCap));\n    args.push(_nullifyMax(order.auctionStrategy));\n    args.push(_nullifyMax(order.startingPrice));\n    args.push(_nullifyMax(order.stockRefPrice));\n    args.push(_nullifyMax(order.delta));\n\n    // Volatility orders had specific watermark price attribs in server version 26\n    lower = ((this._controller._serverVersion == 26 && order.orderType === 'VOL') ?\n        Number.MAX_VALUE :\n        order.stockRangeLower);\n    upper = (this._controller._serverVersion == 26 && order.orderType === 'VOL') ?\n      Number.MAX_VALUE :\n      order.stockRangeUpper;\n    args.push(_nullifyMax(lower));\n    args.push(_nullifyMax(upper));\n  }\n\n  if (this._controller._serverVersion >= 22) {\n    args.push(order.overridePercentageConstraints);\n  }\n\n  if (this._controller._serverVersion >= 26) { // Volatility orders\n     args.push(_nullifyMax(order.volatility));\n     args.push(_nullifyMax(order.volatilityType));\n\n    if (this._controller._serverVersion < 28) {\n      args.push(order.deltaNeutralOrderType.toUpperCase() === 'MKT');\n    } else {\n      args.push(order.deltaNeutralOrderType);\n      args.push(_nullifyMax(order.deltaNeutralAuxPrice));\n\n      if (this._controller._serverVersion >= C.MIN_SERVER_VER.DELTA_NEUTRAL_CONID &&\n          !_.isEmpty(order.deltaNeutralOrderType)){\n        args.push(order.deltaNeutralConId);\n        args.push(order.deltaNeutralSettlingFirm);\n        args.push(order.deltaNeutralClearingAccount);\n        args.push(order.deltaNeutralClearingIntent);\n      }\n\n      if (this._controller._serverVersion >= C.MIN_SERVER_VER.DELTA_NEUTRAL_OPEN_CLOSE &&\n          !_.isEmpty(order.deltaNeutralOrderType)){\n        args.push(order.deltaNeutralOpenClose);\n        args.push(order.deltaNeutralShortSale);\n        args.push(order.deltaNeutralShortSaleSlot);\n        args.push(order.deltaNeutralDesignatedLocation);\n      }\n    }\n\n    args.push(order.continuousUpdate);\n\n    if (this._controller._serverVersion == 26) {\n      // Volatility orders had specific watermark price attribs in server version 26\n      lower = (order.orderType === 'VOL' ? order.stockRangeLower : Number.MAX_VALUE);\n      upper = (order.orderType === 'VOL' ? order.stockRangeUpper : Number.MAX_VALUE);\n      args.push(_nullifyMax(lower));\n      args.push(_nullifyMax(upper));\n    }\n\n    args.push(_nullifyMax(order.referencePriceType));\n  }\n\n  if (this._controller._serverVersion >= 30) { // TRAIL_STOP_LIMIT stop price\n    args.push(_nullifyMax(order.trailStopPrice));\n  }\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.TRAILING_PERCENT){\n    args.push(_nullifyMax(order.trailingPercent));\n  }\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.SCALE_ORDERS) {\n    if (this._controller._serverVersion >= C.MIN_SERVER_VER.SCALE_ORDERS2) {\n     args.push(_nullifyMax(order.scaleInitLevelSize));\n     args.push(_nullifyMax(order.scaleSubsLevelSize));\n    } else {\n      args.push('');\n      args.push(_nullifyMax(order.scaleInitLevelSize));\n    }\n    args.push(_nullifyMax(order.scalePriceIncrement));\n  }\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.SCALE_ORDERS3 &&\n      order.scalePriceIncrement > 0.0 &&\n      order.scalePriceIncrement != Number.MAX_VALUE) {\n    args.push(_nullifyMax(order.scalePriceAdjustValue));\n    args.push(_nullifyMax(order.scalePriceAdjustInterval));\n    args.push(_nullifyMax(order.scaleProfitOffset));\n    args.push(order.scaleAutoReset);\n    args.push(_nullifyMax(order.scaleInitPosition));\n    args.push(_nullifyMax(order.scaleInitFillQty));\n    args.push(order.scaleRandomPercent);\n  }\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.SCALE_TABLE) {\n    args.push(order.scaleTable);\n    args.push(order.activeStartTime);\n    args.push(order.activeStopTime);\n  }\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.HEDGE_ORDERS) {\n    args.push(order.hedgeType);\n    if (!_.isEmpty(order.hedgeType)) {\n      args.push(order.hedgeParam);\n    }\n  }\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.OPT_OUT_SMART_ROUTING) {\n    args.push(order.optOutSmartRouting);\n  }\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.PTA_ORDERS) {\n    args.push(order.clearingAccount);\n    args.push(order.clearingIntent);\n  }\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.NOT_HELD) {\n    args.push(order.notHeld);\n  }\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.UNDER_COMP) {\n    if (_.isPlainObject(contract.underComp) && !_.isEmpty(contract.underComp)) {\n      args.push(true);\n      args.push(contract.underComp.conId);\n      args.push(contract.underComp.delta);\n      args.push(contract.underComp.price);\n    } else {\n      args.push(false);\n    }\n  }\n\n  var algoParamsCount;\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.ALGO_ORDERS) {\n    args.push(order.algoStrategy);\n    if (!_.isEmpty(order.algoStrategy)) {\n      algoParamsCount = (!_.isArray(order.algoParams) ? 0 : order.algoParams.length);\n      args.push(algoParamsCount);\n      if (algoParamsCount > 0) {\n        order.algoParams.forEach(function (tagValue) {\n          args.push(tagValue.tag);\n          args.push(tagValue.value);\n        });\n      }\n    }\n  }\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.WHAT_IF_ORDERS) {\n    args.push(order.whatIf);\n  }\n\n  this._send(args);\n};\n\nOutgoing.prototype.replaceFA = function (faDataType, xml) {\n  if (this._controller._serverVersion < 13) {\n    return this._controller.emitError('This feature is only available for versions of TWS >= 13.');\n  }\n\n  var version = 1;\n\n  this._send(C.OUTGOING.REPLACE_FA, version, faDataType, xml);\n};\n\nOutgoing.prototype.reqAccountSummary = function (reqId, group, tags) {\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.ACCT_SUMMARY) {\n    return this._controller.emitError('It does not support account summary requests.');\n  }\n\n  var version = 1;\n\n  this._send(C.OUTGOING.REQ_ACCOUNT_SUMMARY, version, reqId, group, tags);\n};\n\nOutgoing.prototype.reqAccountUpdates = function (subscribe, acctCode) {\n  var version = 2;\n\n  if (this._controller._serverVersion >= 9) {\n    this._send(C.OUTGOING.REQ_ACCOUNT_DATA, version, subscribe, acctCode);\n  } else {\n    this._send(C.OUTGOING.REQ_ACCOUNT_DATA, version, subscribe);\n  }\n};\n\nOutgoing.prototype.reqAllOpenOrders = function () {\n  var version = 1;\n\n  this._send(C.OUTGOING.REQ_ALL_OPEN_ORDERS, version);\n};\n\nOutgoing.prototype.reqAutoOpenOrders = function (bAutoBind) {\n  var version = 1;\n\n  this._send(C.OUTGOING.REQ_AUTO_OPEN_ORDERS, version, bAutoBind);\n};\n\nOutgoing.prototype.reqContractDetails = function (reqId, contract) {\n  if (this._controller._serverVersion < 4) {\n    return this._controller.emitError('This feature is only available for versions of TWS >=4');\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.SEC_ID_TYPE) {\n    if (!_.isEmpty(contract.secIdType) || !_.isEmpty(contract.secId)) {\n      return this._controller.emitError('It does not support secIdType and secId parameters.');\n    }\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.TRADING_CLASS) {\n    if (!_.isEmpty(contract.tradingClass)) {\n      return this._controller.emitError('It does not support tradingClass parameter in reqContractDetails.');\n    }\n  }\n\n  var version = 7;\n\n  // send req mkt data msg\n  var args = [C.OUTGOING.REQ_CONTRACT_DATA, version];\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.CONTRACT_DATA_CHAIN) {\n    args.push(reqId);\n  }\n\n  // send contract fields\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.CONTRACT_CONID) {\n    args.push(contract.conId);\n  }\n\n  args.push(contract.symbol);\n  args.push(contract.secType);\n  args.push(contract.expiry);\n  args.push(contract.strike);\n  args.push(contract.right);\n\n  if (this._controller._serverVersion >= 15) {\n    args.push(contract.multiplier);\n  }\n\n  args.push(contract.exchange);\n  args.push(contract.currency);\n  args.push(contract.localSymbol);\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.TRADING_CLASS) {\n    args.push(contract.tradingClass);\n  }\n\n  if (this._controller._serverVersion >= 31) {\n    args.push(contract.includeExpired);\n  }\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.SEC_ID_TYPE) {\n    args.push(contract.secIdType);\n    args.push(contract.secId);\n  }\n\n  this._send(args);\n};\n\nOutgoing.prototype.reqCurrentTime = function () {\n  if (this._controller._serverVersion < 33) {\n    return this._controller.emitError('It does not support current time requests.');\n  }\n\n  var version = 1;\n\n  this._send(C.OUTGOING.REQ_CURRENT_TIME, version);\n};\n\nOutgoing.prototype.reqExecutions = function (reqId, filter) {\n  // NOTE: Time format must be 'yyyymmdd-hh:mm:ss' E.g. '20030702-14:55'\n\n  var version = 3;\n\n  // send req open orders msg\n  var args = [C.OUTGOING.REQ_EXECUTIONS, version];\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.EXECUTION_DATA_CHAIN) {\n    args.push(reqId);\n  }\n\n  // Send the execution rpt filter data (srv v9 and above)\n  args.push(filter.clientId);\n  args.push(filter.acctCode);\n  args.push(filter.time);\n  args.push(filter.symbol);\n  args.push(filter.secType);\n  args.push(filter.exchange);\n  args.push(filter.side);\n\n  this._send(args);\n};\n\nOutgoing.prototype.reqFundamentalData = function (reqId, contract, reportType) {\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.FUNDAMENTAL_DATA) {\n    return this._controller.emitError('It does not support fundamental data requests.');\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.TRADING_CLASS) {\n    if (contract.conId > 0) {\n      return this._controller.emitError('It does not support conId parameter in reqFundamentalData.');\n    }\n  }\n\n  var version = 2;\n\n  // send req fund data msg\n  var args = [C.OUTGOING.REQ_FUNDAMENTAL_DATA, version, reqId];\n\n  // send contract fields\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.TRADING_CLASS) {\n    args.push(contract.conId);\n  }\n\n  args.push(contract.symbol);\n  args.push(contract.secType);\n  args.push(contract.exchange);\n  args.push(contract.primaryExch);\n  args.push(contract.currency);\n  args.push(contract.localSymbol);\n\n  args.push(reportType);\n\n  this._send(args);\n};\n\nOutgoing.prototype.reqGlobalCancel = function () {\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.REQ_GLOBAL_CANCEL) {\n    return this._controller.emitError('It does not support globalCancel requests.');\n  }\n\n  var version = 1;\n\n  this._send(C.OUTGOING.REQ_GLOBAL_CANCEL, version);\n};\n\nOutgoing.prototype.reqHistoricalData = function (tickerId, contract, endDateTime, durationStr,\n                                                 barSizeSetting, whatToShow, useRTH, formatDate) {\n  var version = 5;\n\n  if (this._controller._serverVersion < 16) {\n    return this._controller.emitError('It does not support historical data backfill.');\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.TRADING_CLASS) {\n    if (!_.isEmpty(contract.tradingClass) || contract.conId > 0) {\n      return this._controller.emitError('It does not support conId and tradingClass parameters in reqHistroricalData.');\n    }\n  }\n\n  var args = [C.OUTGOING.REQ_HISTORICAL_DATA, version, tickerId];\n\n  // send contract fields\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.TRADING_CLASS) {\n    args.push(contract.conId);\n  }\n\n  args.push(contract.symbol);\n  args.push(contract.secType);\n  args.push(contract.expiry);\n  args.push(contract.strike);\n  args.push(contract.right);\n  args.push(contract.multiplier);\n  args.push(contract.exchange);\n  args.push(contract.primaryExch);\n  args.push(contract.currency);\n  args.push(contract.localSymbol);\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.TRADING_CLASS) {\n    args.push(contract.tradingClass);\n  }\n\n  if (this._controller._serverVersion >= 31) {\n    args.push(!!contract.includeExpired);\n  }\n\n  if (this._controller._serverVersion >= 20) {\n    args.push(endDateTime);\n    args.push(barSizeSetting);\n  }\n\n  args.push(durationStr);\n  args.push(useRTH);\n  args.push(whatToShow);\n\n  if (this._controller._serverVersion > 16) {\n    args.push(formatDate);\n  }\n\n\n\n  if (_.isString(contract.secType) &&\n      C.BAG_SEC_TYPE.toUpperCase() === contract.secType.toUpperCase()) {\n    if (!_.isArray(contract.comboLegs)) {\n      args.push(0);\n    } else {\n      args.push(contract.comboLegs.length);\n\n      contract.comboLegs.forEach(function (comboLeg) {\n        args.push(comboLeg.conId);\n        args.push(comboLeg.ratio);\n        args.push(comboLeg.action);\n        args.push(comboLeg.exchange);\n      });\n    }\n  }\n\n  this._send(args);\n};\n\nOutgoing.prototype.reqIds = function (numIds) {\n  var version = 1;\n\n  this._send(C.OUTGOING.REQ_IDS, version, numIds);\n};\n\nOutgoing.prototype.reqManagedAccts = function () {\n  var version = 1;\n\n  this._send(C.OUTGOING.REQ_MANAGED_ACCTS, version);\n};\n\nOutgoing.prototype.reqMarketDataType = function (marketDataType) {\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.REQ_MARKET_DATA_TYPE) {\n    return this._controller.emitError('It does not support marketDataType requests.');\n  }\n\n  var version = 1;\n\n  this._send(C.OUTGOING.REQ_MARKET_DATA_TYPE, version, marketDataType);\n};\n\nOutgoing.prototype.reqMktData = function (tickerId, contract, genericTickList, snapshot) {\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.SNAPSHOT_MKT_DATA && snapshot) {\n    return this._controller.emitError('It does not support snapshot market data requests.');\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.UNDER_COMP) {\n    return this._controller.emitError('It does not support delta-neutral orders.');\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.REQ_MKT_DATA_CONID) {\n    return this._controller.emitError('It does not support conId parameter.');\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.TRADING_CLASS) {\n    if (!_.isEmpty(contract.tradingClass)) {\n      return this._controller.emitError('It does not support tradingClass parameter in reqMarketData.');\n    }\n  }\n\n  var version = 10;\n\n  var args = [C.OUTGOING.REQ_MKT_DATA, version, tickerId];\n\n  // send contract fields\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.REQ_MKT_DATA_CONID) {\n    args.push(contract.conId);\n  }\n  args.push(contract.symbol);\n  args.push(contract.secType);\n  args.push(contract.expiry);\n  args.push(contract.strike);\n  args.push(contract.right);\n\n  if (this._controller._serverVersion >= 15) {\n    args.push(contract.multiplier);\n  }\n\n  args.push(contract.exchange);\n\n  if (this._controller._serverVersion >= 14) {\n    args.push(contract.primaryExch);\n  }\n\n  args.push(contract.currency);\n\n  if (this._controller._serverVersion >= 2) {\n    args.push(contract.localSymbol);\n  }\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.TRADING_CLASS) {\n    args.push(contract.tradingClass);\n  }\n\n  if (this._controller._serverVersion >= 8 &&\n      _.isString(contract.secType) &&\n      C.BAG_SEC_TYPE.toUpperCase() === contract.secType.toUpperCase()) {\n    if (!_.isArray(contract.comboLegs)) {\n      args.push(0);\n    } else {\n      args.push(contract.comboLegs.length);\n      contract.comboLegs.forEach(function (comboLeg) {\n        args.push(comboLeg.conId);\n        args.push(comboLeg.ratio);\n        args.push(comboLeg.action);\n        args.push(comboLeg.exchange);\n      });\n    }\n  }\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.UNDER_COMP) {\n    if (_.isPlainObject(contract.underComp)) {\n      args.push(true);\n      args.push(contract.underComp.conId);\n      args.push(contract.underComp.delta);\n      args.push(contract.underComp.price);\n    } else {\n      args.push(false);\n    }\n  }\n\n  if (this._controller._serverVersion >= 31) {\n    /*\n     * Note: Even though SHORTABLE tick type supported only\n     *       starting server version 33 it would be relatively\n     *       expensive to expose this restriction here.\n     *\n     *       Therefore we are relying on TWS doing validation.\n     */\n    args.push(genericTickList);\n  }\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.SNAPSHOT_MKT_DATA) {\n    args.push(snapshot);\n  }\n\n  this._send(args);\n};\n\nOutgoing.prototype.reqMktDepth = function (tickerId, contract, numRows) {\n  if (this._controller._serverVersion < 6) {\n      return this._controller.emitError('This feature is only available for versions of TWS >=6');\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.TRADING_CLASS) {\n    if (!_.isEmpty(contract.tradingClass) || contract.conId > 0) {\n      return this._controller.emitError('It does not support conId and tradingClass parameters in reqMktDepth.');\n    }\n  }\n\n  var version = 4;\n\n  // send req mkt data msg\n  var args = [C.OUTGOING.REQ_MKT_DEPTH, version, tickerId];\n\n  // send contract fields\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.TRADING_CLASS) {\n    args.push(contract.conId);\n  }\n\n  args.push(contract.symbol);\n  args.push(contract.secType);\n  args.push(contract.expiry);\n  args.push(contract.strike);\n  args.push(contract.right);\n\n  if (this._controller._serverVersion >= 15) {\n    args.push(contract.multiplier);\n  }\n\n  args.push(contract.exchange);\n  args.push(contract.currency);\n  args.push(contract.localSymbol);\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.TRADING_CLASS) {\n    args.push(contract.tradingClass);\n  }\n\n  if (this._controller._serverVersion >= 19) {\n    args.push(numRows);\n  }\n\n  this._send(args);\n};\n\nOutgoing.prototype.reqNewsBulletins = function (allMsgs) {\n  var version = 1;\n\n  this._send(C.OUTGOING.REQ_NEWS_BULLETINS, version, allMsgs);\n};\n\nOutgoing.prototype.reqOpenOrders = function () {\n  var version = 1;\n\n  this._send(C.OUTGOING.REQ_OPEN_ORDERS, version);\n};\n\nOutgoing.prototype.reqPositions = function () {\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.ACCT_SUMMARY) {\n    return this._controller.emitError('It does not support position requests.');\n  }\n\n  var version = 1;\n\n  this._send(C.OUTGOING.REQ_POSITIONS, version);\n};\n\nOutgoing.prototype.reqRealTimeBars = function (tickerId, contract, barSize, whatToShow, useRTH) {\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.REAL_TIME_BARS) {\n    return this._controller.emitError('It does not support real time bars.');\n  }\n\n  if (this._controller._serverVersion < C.MIN_SERVER_VER.TRADING_CLASS) {\n    if (!_.isEmpty(contract.tradingClass) || contract.conId > 0) {\n      return this._controller.emitError('It does not support conId and tradingClass parameters in reqRealTimeBars.');\n    }\n  }\n\n  var version = 2;\n\n  // send req mkt data msg\n  var args = [C.OUTGOING.REQ_REAL_TIME_BARS, version, tickerId];\n\n  // send contract fields\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.TRADING_CLASS) {\n    args.push(contract.conId);\n  }\n\n  args.push(contract.symbol);\n  args.push(contract.secType);\n  args.push(contract.expiry);\n  args.push(contract.strike);\n  args.push(contract.right);\n  args.push(contract.multiplier);\n  args.push(contract.exchange);\n  args.push(contract.primaryExch);\n  args.push(contract.currency);\n  args.push(contract.localSymbol);\n\n  if (this._controller._serverVersion >= C.MIN_SERVER_VER.TRADING_CLASS) {\n    args.push(contract.tradingClass);\n  }\n\n  args.push(barSize);  // this parameter is not currently used\n  args.push(whatToShow);\n  args.push(useRTH);\n\n  this._send(args);\n};\n\nOutgoing.prototype.reqScannerParameters = function () {\n  if (this._controller._serverVersion < 24) {\n    return this._controller.emitError('It does not support API scanner subscription.');\n  }\n\n  var version = 1;\n\n  this._send(C.OUTGOING.REQ_SCANNER_PARAMETERS, version);\n};\n\nOutgoing.prototype.reqScannerSubscription = function (tickerId, subscription) {\n  if (this._controller._serverVersion < 24) {\n    return this._controller.emitError('It does not support API scanner subscription.');\n  }\n\n  var version = 3;\n\n  var args = [C.OUTGOING.REQ_SCANNER_SUBSCRIPTION, version, tickerId];\n\n  args.push(_nullifyMax(subscription.numberOfRows));\n  args.push(subscription.instrument);\n  args.push(subscription.locationCode);\n  args.push(subscription.scanCode);\n  args.push(_nullifyMax(subscription.abovePrice));\n  args.push(_nullifyMax(subscription.belowPrice));\n  args.push(_nullifyMax(subscription.aboveVolume));\n  args.push(_nullifyMax(subscription.marketCapAbove));\n  args.push(_nullifyMax(subscription.marketCapBelow));\n  args.push(subscription.moodyRatingAbove);\n  args.push(subscription.moodyRatingBelow);\n  args.push(subscription.spRatingAbove);\n  args.push(subscription.spRatingBelow);\n  args.push(subscription.maturityDateAbove);\n  args.push(subscription.maturityDateBelow);\n  args.push(_nullifyMax(subscription.couponRateAbove));\n  args.push(_nullifyMax(subscription.couponRateBelow));\n  args.push(subscription.excludeConvertible);\n\n  if (this._controller._serverVersion >= 25) {\n    args.push(_nullifyMax(subscription.averageOptionVolumeAbove));\n    args.push(subscription.scannerSettingPairs);\n  }\n\n  if (this._controller._serverVersion >= 27) {\n    args.push(subscription.stockTypeFilter);\n  }\n\n  this._send(args);\n};\n\nOutgoing.prototype.requestFA = function (faDataType) {\n  if (this._controller._serverVersion < 13) {\n    return this._controller.emitError('This feature is only available for versions of TWS >= 13.');\n  }\n\n  var version = 1;\n\n  this._send(C.OUTGOING.REQ_FA, version, faDataType);\n};\n\nOutgoing.prototype.setServerLogLevel = function (logLevel) {\n  var version = 1;\n\n  this._send(C.OUTGOING.SET_SERVER_LOGLEVEL, version, logLevel);\n};\n\nmodule.exports = Outgoing;\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/contract/index.js":"exports.combo = require('./combo');\nexports.forex = require('./forex');\nexports.future = require('./future');\nexports.fop = require('./fop');\nexports.option = require('./option');\nexports.stock = require('./stock');\nexports.cfd = require('./cfd');\nexports.index = require('./ind');\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/contract/combo.js":"var assert = require('assert');\n\nvar _ = require('lodash');\n\nmodule.exports = function (symbol, currency, exchange) {\n  assert(_.isString(symbol), 'Symbol must be a string.');\n\n  return {\n    currency: currency || 'USD',\n    exchange: exchange || 'SMART',\n    secType: 'BAG',\n    symbol: symbol\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/contract/forex.js":"var assert = require('assert');\n\nvar _ = require('lodash');\n\n// Between two currencies,\n// Whatever currency comes first should be in \"symbol\" and the other one must be in \"currency\".\n// EUR GBP AUD USD TRY ZAR CAD CHF MXN HKD JPY INR NOK SEK RUB\n\nvar CURRENCIES = [\n  'KRW', 'EUR', 'GBP', 'AUD',\n  'USD', 'TRY', 'ZAR', 'CAD', \n  'CHF', 'MXN', 'HKD', 'JPY', \n  'INR', 'NOK', 'SEK', 'RUB'\n];\n\nmodule.exports = function (symbol, currency) {\n  assert(_.isString(symbol), 'Symbol must be a string.');\n  if (!_.isString(currency)) { currency = 'USD'; }\n\n  var temp;\n\n  // Swap between symbol and currency if the ordering is incorrect.\n  if (CURRENCIES.indexOf(symbol) > CURRENCIES.indexOf(currency)) {\n    temp = symbol;\n    symbol = currency;\n    currency = temp;\n  }\n\n  return {\n    currency: currency,\n    exchange: 'IDEALPRO',\n    secType: 'CASH',\n    symbol: symbol\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/contract/future.js":"var assert = require('assert');\n\nvar _ = require('lodash');\n\nmodule.exports = function (symbol, expiry, currency, exchange, multiplier) {\n  assert(_.isString(symbol), 'Symbol must be a string.');\n  assert(_.isString(expiry), 'Expiry must be a string.');\n\n  return {\n    secType: 'FUT',\n    symbol: symbol,\n    expiry: expiry,\n    currency: currency || 'USD',\n    exchange: exchange || 'ONE',\n    multiplier: multiplier\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/contract/fop.js":"var assert = require('assert');\n\nvar _ = require('lodash');\n\nmodule.exports = function (symbol, expiry, strike, right, multiplier, exchange, currency) {\n  assert(_.isString(right), 'Right must be a string.');\n  assert(_.isString(symbol), 'Symbol must be a string.');\n  assert(_.isString(expiry), 'Expiry must be a string.');\n  assert(_.isNumber(strike), 'Strike must be a number.');\n\n  return {\n    currency: currency || 'USD',\n    exchange: exchange ||'GLOBEX',\n    expiry: expiry,\n    multiplier: multiplier || 50,\n    right: right,\n    secType: 'FOP',\n    strike: strike,\n    symbol: symbol\n  };\n};\n\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/contract/option.js":"var assert = require('assert');\n\nvar _ = require('lodash');\n\nmodule.exports = function (symbol, expiry, strike, right, exchange, currency) {\n  assert(_.isString(right), 'Right must be a string.');\n  assert(_.isString(symbol), 'Symbol must be a string.');\n  assert(_.isString(expiry), 'Expiry must be a string.');\n  assert(_.isNumber(strike), 'Strike must be a number.');\n\n  return {\n    currency: currency || 'USD',\n    exchange: exchange ||'SMART',\n    expiry: expiry,\n    multiplier: 100,\n    right: right,\n    secType: 'OPT',\n    strike: strike,\n    symbol: symbol\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/contract/stock.js":"var assert = require('assert');\n\nvar _ = require('lodash');\n\nmodule.exports = function (symbol, exchange, currency) {\n  assert(_.isString(symbol), 'Symbol must be a string.');\n\n  return {\n    currency: currency || 'USD',\n    exchange: exchange || 'SMART',\n    secType: 'STK',\n    symbol: symbol\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/contract/cfd.js":"var assert = require('assert');\n\nvar _ = require('lodash');\n\nmodule.exports = function (symbol, exchange, currency) {\n  assert(_.isString(symbol), 'Symbol must be a string.');\n\n  return {\n    currency: currency || 'USD',\n    exchange: exchange || 'SMART',\n    secType: 'CFD',\n    symbol: symbol\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/contract/ind.js":"var assert = require('assert');\n\nvar _ = require('lodash');\n\nmodule.exports = function (symbol, expiry, currency, exchange) {\n  assert(_.isString(symbol), 'Symbol must be a string.');\n  assert(_.isString(expiry), 'Expiry must be a string.');\n\n  return {\n    currency: currency || 'USD',\n    exchange: exchange || 'CBOE',\n    expiry: expiry,\n    secType: 'IND',\n    symbol: symbol\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/order/index.js":"exports.limit = require('./limit');\nexports.market = require('./market');\nexports.stop = require('./stop');\nexports.stopLimit = require('./stopLimit');\nexports.marketClose = require('./marketClose');\nexports.trailingStop = require('./trailingStop');\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/order/limit.js":"var assert = require('assert');\n\nvar _ = require('lodash');\n\nmodule.exports = function (action, quantity, price, transmitOrder) {\n  assert(_.isString(action), 'Action must be a string.');\n  assert(_.isNumber(quantity), 'Quantity must be a number.');\n  assert(_.isNumber(price), 'Price must be a number.');\n\n  if (transmitOrder === undefined) {\n    transmitOrder = true;\n  }\n\n  return {\n    action: action,\n    lmtPrice: price,\n    orderType: 'LMT',\n    totalQuantity: quantity,\n    transmit: transmitOrder\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/order/market.js":"var assert = require('assert');\n\nvar _ = require('lodash');\n\nmodule.exports = function (action, quantity, transmitOrder, goodAfterTime, goodTillDate) {\n  assert(_.isString(action), 'Action must be a string.');\n  assert(_.isNumber(quantity), 'Quantity must be a string.');\n\n  if (transmitOrder === undefined) {\n    transmitOrder = true;\n  }\n\n  if ( goodAfterTime === undefined ) {\n    goodAfterTime = '';\n  }\n\n  if ( goodTillDate === undefined ) {\n    goodTillDate = '';\n  }\n\n  return {\n    action: action,\n    orderType: 'MKT',\n    totalQuantity: quantity,\n    transmit: transmitOrder,\n    goodAfterTime: goodAfterTime,\n    goodTillDate: goodTillDate\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/order/stop.js":"var assert = require('assert');\n\nvar _ = require('lodash');\n\nmodule.exports = function (action, quantity, price, transmitOrder, parentId, tif) {\n  assert(_.isString(action), 'Action must be a string.');\n  assert(_.isNumber(quantity), 'Quantity must be a number.');\n  assert(_.isNumber(price), 'Price must be a number.');\n\n  return {\n    action: action,\n    auxPrice: price,\n    orderType: 'STP',\n    totalQuantity: quantity,\n    transmit: transmitOrder || true,\n    parentId: parentId || 0,\n    tif: tif || 'DAY'\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/order/stopLimit.js":"var assert = require('assert');\n\nvar _ = require('lodash');\n\nmodule.exports = function (action, quantity, limitPrice, stopPrice, transmitOrder, parentId, tif) {\n  assert(_.isString(action), 'Action must be a string.');\n  assert(_.isNumber(quantity), 'Quantity must be a string.');\n  assert(_.isNumber(stopPrice), 'Stop price must be a number.');\n  assert(_.isNumber(limitPrice), 'Limit price must be a number.');\n\n  return {\n    action: action,\n    lmtPrice: limitPrice,\n    auxPrice: stopPrice,\n    orderType: 'STP LMT',\n    totalQuantity: quantity,\n    transmit: transmitOrder || true,\n    parentId: parentId || 0,\n    tif: tif || 'DAY'\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/order/marketClose.js":"var assert = require('assert');\n\nvar _ = require('lodash');\n\nmodule.exports = function (action, quantity, transmitOrder) {\n  assert(_.isString(action), 'Action must be a string.');\n  assert(_.isNumber(quantity), 'Quantity must be a string.');\n\n  if (transmitOrder === undefined) {\n    transmitOrder = true;\n  }\n\n  return {\n    action: action,\n    orderType: 'MOC',\n    totalQuantity: quantity,\n    transmit: transmitOrder\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/order/trailingStop.js":"var assert = require('assert');\n\nvar _ = require('lodash');\n\nmodule.exports = function (action, quantity, auxPrice, tif, transmitOrder, parentId) {\n  assert(_.isString(action), 'Action must be a string.');\n  assert(_.isNumber(quantity), 'Quantity must be a number.');\n  assert(_.isNumber(auxPrice), 'Price must be a number.');\n\n  return {\n    action: action,\n    totalQuantity: quantity,\n    orderType: 'TRAIL',  // https://www.interactivebrokers.com/en/software/api/apiguide/tables/supported_order_types.htm\n    auxPrice: auxPrice,\n    tif: tif,  // note - TRAIL orders are only triggered during the trading hours of the contract\n    transmit: transmitOrder || true,\n    parentId: parentId || 0\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-ib/node_modules/ib/lib/util.js":"var C = require('./constants');\n\nfunction _findKeyForValue(object, value) {\n  for (var key in object) {\n    if (object[key] === value) {\n      return key;\n    }\n  }\n}\n\nfunction incomingToString(incoming) {\n  return _findKeyForValue(C.INCOMING, incoming);\n}\n\nfunction numberToString(number) {\n  if (number === Number.MAX_VALUE) {\n    return 'MAX';\n  } else if (number === Number.MIN_VALUE) {\n    return 'MIN';\n  } else {\n    return number.toString();\n  }\n}\n\nfunction outgoingToString(outgoing) {\n  return _findKeyForValue(C.OUTGOING, outgoing);\n}\n\nfunction tickTypeToString(tickType) {\n  return _findKeyForValue(C.TICK_TYPE, tickType);\n}\n\nexports.incomingToString = incomingToString;\nexports.numberToString = numberToString;\nexports.outgoingToString = outgoingToString;\nexports.tickTypeToString = tickTypeToString;\n"}